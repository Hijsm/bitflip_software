
Da_Vinci_Bitflip_v1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08003b24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003b24  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105c6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002606  00000000  00000000  000305fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00033d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ad  00000000  00000000  00034e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b1e  00000000  00000000  0004bee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089715  00000000  00000000  0005ea03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004abc  00000000  00000000  000e8168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003acc 	.word	0x08003acc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003acc 	.word	0x08003acc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <_Z11stop_for_msm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void stop_for_ms(uint32_t stop_time) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	/* Enter STOP mode for stop_time milliseconds */
	HAL_SuspendTick();	// Stop SysTick from waking up device
 800048c:	f000 fe80 	bl	8001190 <HAL_SuspendTick>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (37/16) * stop_time, RTC_WAKEUPCLOCK_RTCCLK_DIV16);	// Start Wake-Up Timer stop_time ms
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	2200      	movs	r2, #0
 8000496:	4619      	mov	r1, r3
 8000498:	4808      	ldr	r0, [pc, #32]	; (80004bc <_Z11stop_for_msm+0x38>)
 800049a:	f002 fe1d 	bl	80030d8 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Enter Stop Mode
 800049e:	2101      	movs	r1, #1
 80004a0:	2001      	movs	r0, #1
 80004a2:	f001 fd11 	bl	8001ec8 <HAL_PWR_EnterSTOPMode>

	// Resumes here once woken
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); // Disable Wake-Up Timer
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <_Z11stop_for_msm+0x38>)
 80004a8:	f002 fec8 	bl	800323c <HAL_RTCEx_DeactivateWakeUpTimer>
	SystemClock_Config();
 80004ac:	f000 f87a 	bl	80005a4 <_Z18SystemClock_Configv>
	HAL_ResumeTick(); // Resume SysTick
 80004b0:	f000 fe7c 	bl	80011ac <HAL_ResumeTick>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000d0 	.word	0x200000d0

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fdf4 	bl	80010b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f86b 	bl	80005a4 <_Z18SystemClock_Configv>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa5d 	bl	800098c <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80004d2:	f000 f9e7 	bl	80008a4 <_ZL13MX_TIM10_Initv>
  MX_RTC_Init();
 80004d6:	f000 f96d 	bl	80007b4 <_ZL11MX_RTC_Initv>
  MX_I2C1_Init();
 80004da:	f000 f937 	bl	800074c <_ZL12MX_I2C1_Initv>
  MX_ADC_Init();
 80004de:	f000 f8d3 	bl	8000688 <_ZL11MX_ADC_Initv>
  MX_USART1_UART_Init();
 80004e2:	f000 fa23 	bl	800092c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim10); // Start TIM10 for microsecond delay function
 80004e6:	482d      	ldr	r0, [pc, #180]	; (800059c <main+0xdc>)
 80004e8:	f002 ff6a 	bl	80033c0 <HAL_TIM_Base_Start>

  MemoryController mem(M1_CE_GPIO_Port, M1_CE_Pin);
 80004ec:	463b      	mov	r3, r7
 80004ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f2:	492b      	ldr	r1, [pc, #172]	; (80005a0 <main+0xe0>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fb07 	bl	8000b08 <_ZN16MemoryControllerC1EP12GPIO_TypeDeft>

  HAL_GPIO_WritePin(FET_CTRL_GPIO_Port, FET_CTRL_Pin, GPIO_PIN_RESET); // Control Latch up FET
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000500:	4827      	ldr	r0, [pc, #156]	; (80005a0 <main+0xe0>)
 8000502:	f001 fb85 	bl	8001c10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_CE_GPIO_Port, M1_CE_Pin|M2_CE_Pin|M3_CE_Pin, GPIO_PIN_SET); // Disable All Memory
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800050c:	4824      	ldr	r0, [pc, #144]	; (80005a0 <main+0xe0>)
 800050e:	f001 fb7f 	bl	8001c10 <HAL_GPIO_WritePin>
  uint8_t reading;
  #if PRINT_DEBUG
  	  char print_buffer[8+2];
  #endif

  const uint32_t stop_time = 2000;	// Time to STOP for in ms
 8000512:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000516:	617b      	str	r3, [r7, #20]

  mem.clear();
 8000518:	463b      	mov	r3, r7
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fbae 	bl	8000c7c <_ZN16MemoryController5clearEv>
  mem.write(400, 1);
 8000520:	463b      	mov	r3, r7
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fb07 	bl	8000b3c <_ZN16MemoryController5writeEmh>

  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for(int a=0; a<128; a++) {
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	2b7f      	cmp	r3, #127	; 0x7f
 8000536:	dc0e      	bgt.n	8000556 <main+0x96>
		int addr = a*16384 + 10;
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	039b      	lsls	r3, r3, #14
 800053c:	330a      	adds	r3, #10
 800053e:	613b      	str	r3, [r7, #16]
		mem.write(addr, a);
 8000540:	6939      	ldr	r1, [r7, #16]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f000 faf7 	bl	8000b3c <_ZN16MemoryController5writeEmh>
	for(int a=0; a<128; a++) {
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	3301      	adds	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	e7ed      	b.n	8000532 <main+0x72>
	}

	for(int a=0; a<128; a++) {
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b7f      	cmp	r3, #127	; 0x7f
 800055e:	dc0f      	bgt.n	8000580 <main+0xc0>
		int addr = a*16384 + 10;
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	039b      	lsls	r3, r3, #14
 8000564:	330a      	adds	r3, #10
 8000566:	60fb      	str	r3, [r7, #12]
		reading = mem.read(addr);
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	463b      	mov	r3, r7
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fb22 	bl	8000bb8 <_ZN16MemoryController4readEm>
 8000574:	4603      	mov	r3, r0
 8000576:	72fb      	strb	r3, [r7, #11]
	for(int a=0; a<128; a++) {
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	3301      	adds	r3, #1
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	e7ec      	b.n	800055a <main+0x9a>
			sprintf(print_buffer, "%08d\n", reading);
			HAL_UART_Transmit(&huart1, (uint8_t*) print_buffer, sizeof(print_buffer), 10);
		#endif
	}

	reading = mem.read((1*65536));
 8000580:	463b      	mov	r3, r7
 8000582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fb16 	bl	8000bb8 <_ZN16MemoryController4readEm>
 800058c:	4603      	mov	r3, r0
 800058e:	72fb      	strb	r3, [r7, #11]
//	HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin);	// Toggle to feed external watch-dog. Needs to be fed at latest every 4.5 seconds
//	HAL_GPIO_TogglePin(FET_CTRL_GPIO_Port, FET_CTRL_Pin);


	// Enter STOP mode for stop_time seconds
	stop_for_ms(stop_time);
 8000590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000594:	f7ff ff76 	bl	8000484 <_Z11stop_for_msm>


  }
 8000598:	e7c9      	b.n	800052e <main+0x6e>
 800059a:	bf00      	nop
 800059c:	200000f0 	.word	0x200000f0
 80005a0:	40020400 	.word	0x40020400

080005a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fa82 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <_Z18SystemClock_Configv+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <_Z18SystemClock_Configv+0xe0>)
 80005da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005de:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005e0:	230a      	movs	r3, #10
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fc89 	bl	8001f20 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 800061e:	f000 fa3f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f001 ff9f 	bl	8002580 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000652:	f000 fa25 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000656:	2301      	movs	r3, #1
 8000658:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800065e:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fa10 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf14      	ite	ne
 800066e:	2301      	movne	r3, #1
 8000670:	2300      	moveq	r3, #0
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000678:	f000 fa12 	bl	8000aa0 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40007000 	.word	0x40007000

08000688 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <_ZL11MX_ADC_Initv+0xc0>)
 800069c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006e6:	2210      	movs	r2, #16
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 80006fa:	f000 fd65 	bl	80011c8 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZL11MX_ADC_Initv+0x8a>
  {
    Error_Handler();
 800070e:	f000 f9c7 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000712:	2313      	movs	r3, #19
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2301      	movs	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <_ZL11MX_ADC_Initv+0xbc>)
 8000724:	f000 fe96 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_ZL11MX_ADC_Initv+0xb4>
  {
    Error_Handler();
 8000738:	f000 f9b2 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000028 	.word	0x20000028
 8000748:	40012400 	.word	0x40012400

0800074c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <_ZL12MX_I2C1_Initv+0x60>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000758:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <_ZL12MX_I2C1_Initv+0x64>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 200;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000764:	22c8      	movs	r2, #200	; 0xc8
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800078a:	f001 fa59 	bl	8001c40 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800079e:	f000 f97f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000007c 	.word	0x2000007c
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007cc:	4b33      	ldr	r3, [pc, #204]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007ce:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <_ZL11MX_RTC_Initv+0xec>)
 80007d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007da:	227f      	movs	r2, #127	; 0x7f
 80007dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f6:	4829      	ldr	r0, [pc, #164]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 80007f8:	f002 fa14 	bl	8002c24 <HAL_RTC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 800080c:	f000 f948 	bl	8000aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000810:	2300      	movs	r3, #0
 8000812:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000814:	2300      	movs	r3, #0
 8000816:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000818:	2300      	movs	r3, #0
 800081a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	481c      	ldr	r0, [pc, #112]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 800082c:	f002 fa8b 	bl	8002d46 <HAL_RTC_SetTime>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <_ZL11MX_RTC_Initv+0x90>
  {
    Error_Handler();
 8000840:	f000 f92e 	bl	8000aa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000844:	2301      	movs	r3, #1
 8000846:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000848:	2301      	movs	r3, #1
 800084a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800084c:	2301      	movs	r3, #1
 800084e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	2201      	movs	r2, #1
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 800085c:	f002 fb27 	bl	8002eae <HAL_RTC_SetDate>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <_ZL11MX_RTC_Initv+0xc0>
  {
    Error_Handler();
 8000870:	f000 f916 	bl	8000aa0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4625, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000874:	2200      	movs	r2, #0
 8000876:	f241 2111 	movw	r1, #4625	; 0x1211
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <_ZL11MX_RTC_Initv+0xe8>)
 800087c:	f002 fc2c 	bl	80030d8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf14      	ite	ne
 8000886:	2301      	movne	r3, #1
 8000888:	2300      	moveq	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <_ZL11MX_RTC_Initv+0xe0>
  {
    Error_Handler();
 8000890:	f000 f906 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	40002800 	.word	0x40002800

080008a4 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <_ZL13MX_TIM10_Initv+0x84>)
 80008ba:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008be:	220f      	movs	r2, #15
 80008c0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 80008de:	f002 fd30 	bl	8003342 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <_ZL13MX_TIM10_Initv+0x52>
  {
    Error_Handler();
 80008f2:	f000 f8d5 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <_ZL13MX_TIM10_Initv+0x80>)
 8000902:	f002 fda7 	bl	8003454 <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <_ZL13MX_TIM10_Initv+0x76>
  {
    Error_Handler();
 8000916:	f000 f8c3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000f0 	.word	0x200000f0
 8000928:	40010c00 	.word	0x40010c00

0800092c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000968:	f002 ff30 	bl	80037cc <HAL_MultiProcessor_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <_ZL19MX_USART1_UART_Initv+0x54>
  {
    Error_Handler();
 800097c:	f000 f890 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000130 	.word	0x20000130
 8000988:	40013800 	.word	0x40013800

0800098c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a2e      	ldr	r2, [pc, #184]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <_ZL12MX_GPIO_Initv+0x104>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADDR_13_Pin|ADDR_14_Pin|ADDR_15_Pin|ADDR_0_Pin
 80009ea:	2200      	movs	r2, #0
 80009ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009f0:	4828      	ldr	r0, [pc, #160]	; (8000a94 <_ZL12MX_GPIO_Initv+0x108>)
 80009f2:	f001 f90d 	bl	8001c10 <HAL_GPIO_WritePin>
                          |ADDR_1_Pin|ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin
                          |ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_8_Pin
                          |ADDR_9_Pin|ADDR_10_Pin|ADDR_11_Pin|ADDR_12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin
 80009f6:	2200      	movs	r2, #0
 80009f8:	f641 01ff 	movw	r1, #6399	; 0x18ff
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <_ZL12MX_GPIO_Initv+0x10c>)
 80009fe:	f001 f907 	bl	8001c10 <HAL_GPIO_WritePin>
                          |IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin
                          |OUT_EN_Pin|WRITE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADDR_16_Pin|ADDR_17_Pin|ADDR_18_Pin|M2_CE_Pin
 8000a02:	2200      	movs	r2, #0
 8000a04:	f641 7137 	movw	r1, #7991	; 0x1f37
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <_ZL12MX_GPIO_Initv+0x110>)
 8000a0a:	f001 f901 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADDR_13_Pin ADDR_14_Pin ADDR_15_Pin ADDR_0_Pin
                           ADDR_1_Pin ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin
                           ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_8_Pin
                           ADDR_9_Pin ADDR_10_Pin ADDR_11_Pin ADDR_12_Pin */
  GPIO_InitStruct.Pin = ADDR_13_Pin|ADDR_14_Pin|ADDR_15_Pin|ADDR_0_Pin
 8000a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a12:	60fb      	str	r3, [r7, #12]
                          |ADDR_1_Pin|ADDR_2_Pin|ADDR_3_Pin|ADDR_4_Pin
                          |ADDR_5_Pin|ADDR_6_Pin|ADDR_7_Pin|ADDR_8_Pin
                          |ADDR_9_Pin|ADDR_10_Pin|ADDR_11_Pin|ADDR_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <_ZL12MX_GPIO_Initv+0x108>)
 8000a28:	f000 ff72 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_0_Pin IO_1_Pin IO_2_Pin IO_3_Pin
                           IO_4_Pin IO_5_Pin IO_6_Pin IO_7_Pin
                           OUT_EN_Pin WRITE_EN_Pin */
  GPIO_InitStruct.Pin = IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin
 8000a2c:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8000a30:	60fb      	str	r3, [r7, #12]
                          |IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin
                          |OUT_EN_Pin|WRITE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4814      	ldr	r0, [pc, #80]	; (8000a98 <_ZL12MX_GPIO_Initv+0x10c>)
 8000a46:	f000 ff63 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_16_Pin ADDR_17_Pin ADDR_18_Pin M2_CE_Pin
                           M3_CE_Pin FET_CTRL_Pin ADDR_19_Pin ADDR_20_Pin
                           M1_CE_Pin */
  GPIO_InitStruct.Pin = ADDR_16_Pin|ADDR_17_Pin|ADDR_18_Pin|M2_CE_Pin
 8000a4a:	f641 6337 	movw	r3, #7735	; 0x1e37
 8000a4e:	60fb      	str	r3, [r7, #12]
                          |M3_CE_Pin|FET_CTRL_Pin|ADDR_19_Pin|ADDR_20_Pin
                          |M1_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <_ZL12MX_GPIO_Initv+0x110>)
 8000a64:	f000 ff54 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDI_Pin */
  GPIO_InitStruct.Pin = WDI_Pin;
 8000a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WDI_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <_ZL12MX_GPIO_Initv+0x110>)
 8000a82:	f000 ff45 	bl	8001910 <HAL_GPIO_Init>

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <_Z14Set_IO_Outputsv>:
    while(TIM10->CNT < n);
}

GPIO_InitTypeDef GPIO_InitStruct = {0};

void Set_IO_Outputs() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin|IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_Z14Set_IO_Outputsv+0x28>)
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_Z14Set_IO_Outputsv+0x28>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <_Z14Set_IO_Outputsv+0x28>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <_Z14Set_IO_Outputsv+0x28>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	4902      	ldr	r1, [pc, #8]	; (8000ad4 <_Z14Set_IO_Outputsv+0x28>)
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <_Z14Set_IO_Outputsv+0x2c>)
 8000acc:	f000 ff20 	bl	8001910 <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000174 	.word	0x20000174
 8000ad8:	40020000 	.word	0x40020000

08000adc <_Z13Set_IO_Inputsv>:

void Set_IO_Inputs() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin|IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_Z13Set_IO_Inputsv+0x24>)
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <_Z13Set_IO_Inputsv+0x24>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <_Z13Set_IO_Inputsv+0x24>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	4903      	ldr	r1, [pc, #12]	; (8000b00 <_Z13Set_IO_Inputsv+0x24>)
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <_Z13Set_IO_Inputsv+0x28>)
 8000af6:	f000 ff0b 	bl	8001910 <HAL_GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000174 	.word	0x20000174
 8000b04:	40020000 	.word	0x40020000

08000b08 <_ZN16MemoryControllerC1EP12GPIO_TypeDeft>:
        x >>= 1;
    }
    return setBits;
}

MemoryController::MemoryController(GPIO_TypeDef *CE_GPIO_Port, uint16_t CE_Pin) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
	_CE_GPIO_Port = CE_GPIO_Port;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	601a      	str	r2, [r3, #0]
	_CE_Pin = CE_Pin;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	809a      	strh	r2, [r3, #4]
	prev_state = WRITING;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2201      	movs	r2, #1
 8000b26:	719a      	strb	r2, [r3, #6]
	en_state = DISABLED;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	71da      	strb	r2, [r3, #7]
}
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
	...

08000b3c <_ZN16MemoryController5writeEmh>:
void MemoryController::set_CE(GPIO_TypeDef *CE_GPIO_Port, uint16_t CE_Pin) {
	_CE_GPIO_Port = CE_GPIO_Port;
	_CE_Pin = CE_Pin;
}

void MemoryController::write(uint32_t addr, uint8_t data) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	71fb      	strb	r3, [r7, #7]

	// Enable Memory
	if (en_state != ENABLED) {
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	79db      	ldrb	r3, [r3, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <_ZN16MemoryController5writeEmh+0x1c>
		enable();
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f90c 	bl	8000d70 <_ZN16MemoryController6enableEv>
	}

	// Set 21 bit address
	set_addr(addr);
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f866 	bl	8000c2c <_ZN16MemoryController8set_addrEm>

	// Set IO to Outputs
	if (prev_state != WRITING) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	799b      	ldrb	r3, [r3, #6]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d004      	beq.n	8000b72 <_ZN16MemoryController5writeEmh+0x36>
		Set_IO_Outputs();
 8000b68:	f7ff ffa0 	bl	8000aac <_Z14Set_IO_Outputsv>
		prev_state = WRITING;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	719a      	strb	r2, [r3, #6]
	}

	// Set 8 bit data
	GPIOA->ODR = (GPIOA->ODR & 0b11111111111111111111111100000000) | data;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	614b      	str	r3, [r1, #20]

	// Disable Output and Enable Write
	WRITE_EN_GPIO_Port->ODR = (WRITE_EN_GPIO_Port->ODR |= OUT_EN_Pin) &= ~WRITE_EN_Pin; // Set OUT_EN_Pin and reset WRITE_EN_Pin
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <_ZN16MemoryController5writeEmh+0x78>)
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b9a:	6153      	str	r3, [r2, #20]

	// Disable Write
	WRITE_EN_GPIO_Port->ODR |= WRITE_EN_Pin;	// Set WRITE_EN_Pin
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <_ZN16MemoryController5writeEmh+0x74>)
 8000ba2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba6:	6153      	str	r3, [r2, #20]

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020014 	.word	0x40020014

08000bb8 <_ZN16MemoryController4readEm>:

uint8_t MemoryController::read(uint32_t addr) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]

	// Enable Memory
	if (en_state != ENABLED) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	79db      	ldrb	r3, [r3, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <_ZN16MemoryController4readEm+0x18>
		enable();
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f8d0 	bl	8000d70 <_ZN16MemoryController6enableEv>
	}

	// Disable Write and Enable Output
	WRITE_EN_GPIO_Port->ODR = (WRITE_EN_GPIO_Port->ODR |= WRITE_EN_Pin) &= ~OUT_EN_Pin;	// Set WRITE_EN_Pin and reset OUT_EN_Pin
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bda:	6153      	str	r3, [r2, #20]
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_ZN16MemoryController4readEm+0x70>)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000be8:	6153      	str	r3, [r2, #20]

	// Set 21 bit address
	set_addr(addr);
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f81d 	bl	8000c2c <_ZN16MemoryController8set_addrEm>

	// Set IO to Inputs
	if (prev_state != READING) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d004      	beq.n	8000c04 <_ZN16MemoryController4readEm+0x4c>
		Set_IO_Inputs();
 8000bfa:	f7ff ff6f 	bl	8000adc <_Z13Set_IO_Inputsv>
		prev_state = READING;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	719a      	strb	r2, [r3, #6]
	}

	// Read IO
	uint8_t data = GPIOA->IDR & 0xff;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	73fb      	strb	r3, [r7, #15]

	// Disable Output
	OUT_EN_GPIO_Port->ODR = OUT_EN_GPIO_Port->ODR |= OUT_EN_Pin;	// Set OUT_EN_Pin
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <_ZN16MemoryController4readEm+0x6c>)
 8000c18:	6153      	str	r3, [r2, #20]

	return data;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020014 	.word	0x40020014

08000c2c <_ZN16MemoryController8set_addrEm>:

inline void MemoryController::set_addr(uint32_t addr) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	GPIOC->ODR = (GPIOC->ODR & 0b11111111111111110000000000000000) | (addr & 0b1111111111111111);
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <_ZN16MemoryController8set_addrEm+0x48>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	b292      	uxth	r2, r2
 8000c42:	490c      	ldr	r1, [pc, #48]	; (8000c74 <_ZN16MemoryController8set_addrEm+0x48>)
 8000c44:	4313      	orrs	r3, r2
 8000c46:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0b11111111111111111111111111001000) | (((addr & 0b1110000000000000000) >> 16) | ((addr & 0b110000000000000000000) >> 15));
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <_ZN16MemoryController8set_addrEm+0x4c>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f023 0237 	bic.w	r2, r3, #55	; 0x37
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	f003 0107 	and.w	r1, r3, #7
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	0bdb      	lsrs	r3, r3, #15
 8000c5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000c60:	430b      	orrs	r3, r1
 8000c62:	4905      	ldr	r1, [pc, #20]	; (8000c78 <_ZN16MemoryController8set_addrEm+0x4c>)
 8000c64:	4313      	orrs	r3, r2
 8000c66:	614b      	str	r3, [r1, #20]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020400 	.word	0x40020400

08000c7c <_ZN16MemoryController5clearEv>:

void MemoryController::clear() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	// Clear all 2,097,152 addresses
	flood(0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f804 	bl	8000c94 <_ZN16MemoryController5floodEh>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN16MemoryController5floodEh>:

void MemoryController::flood(uint8_t data) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	// Flood all 2,097,152 addresses with data. At 32MHz this takes 2.2 seconds.

	// Enable Memory
	if (en_state != ENABLED) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	79db      	ldrb	r3, [r3, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <_ZN16MemoryController5floodEh+0x1a>
		enable();
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f861 	bl	8000d70 <_ZN16MemoryController6enableEv>
	}

	// Set IO to Outputs
	if (prev_state != WRITING) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	799b      	ldrb	r3, [r3, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d004      	beq.n	8000cc0 <_ZN16MemoryController5floodEh+0x2c>
		Set_IO_Outputs();
 8000cb6:	f7ff fef9 	bl	8000aac <_Z14Set_IO_Outputsv>
		prev_state = WRITING;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	719a      	strb	r2, [r3, #6]
	}

	// Set 8 bit data
	GPIOA->ODR = (GPIOA->ODR & 0xff00) | data;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4925      	ldr	r1, [pc, #148]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]

	// Disable Output and Enable Write
	WRITE_EN_GPIO_Port->ODR = (WRITE_EN_GPIO_Port->ODR |= OUT_EN_Pin) &= ~WRITE_EN_Pin; // Set OUT_EN_Pin and reset WRITE_EN_Pin
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000cd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cda:	6153      	str	r3, [r2, #20]
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <_ZN16MemoryController5floodEh+0xd0>)
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000ce8:	6153      	str	r3, [r2, #20]

	// This is just a fast version of the set_addr function that iterates through all 2,097,152 memory addresses
	uint32_t addr = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	74fb      	strb	r3, [r7, #19]
 8000cf2:	7cfb      	ldrb	r3, [r7, #19]
 8000cf4:	2b1f      	cmp	r3, #31
 8000cf6:	d829      	bhi.n	8000d4c <_ZN16MemoryController5floodEh+0xb8>
		GPIOB->ODR = (GPIOB->ODR & 0b11111111111111111111111111001000) | (((addr & 0b1110000000000000000) >> 16) | ((addr & 0b110000000000000000000) >> 15));
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <_ZN16MemoryController5floodEh+0xd4>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	f023 0237 	bic.w	r2, r3, #55	; 0x37
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	f003 0107 	and.w	r1, r3, #7
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	0bdb      	lsrs	r3, r3, #15
 8000d0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d10:	430b      	orrs	r3, r1
 8000d12:	4915      	ldr	r1, [pc, #84]	; (8000d68 <_ZN16MemoryController5floodEh+0xd4>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	614b      	str	r3, [r1, #20]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d22:	d20f      	bcs.n	8000d44 <_ZN16MemoryController5floodEh+0xb0>
			GPIOC->ODR = (GPIOC->ODR & 0b11111111111111110000000000000000) | (addr & 0b1111111111111111);
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_ZN16MemoryController5floodEh+0xd8>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	490e      	ldr	r1, [pc, #56]	; (8000d6c <_ZN16MemoryController5floodEh+0xd8>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	614b      	str	r3, [r1, #20]
			addr++;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e7eb      	b.n	8000d1c <_ZN16MemoryController5floodEh+0x88>
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 8000d44:	7cfb      	ldrb	r3, [r7, #19]
 8000d46:	3301      	adds	r3, #1
 8000d48:	74fb      	strb	r3, [r7, #19]
 8000d4a:	e7d2      	b.n	8000cf2 <_ZN16MemoryController5floodEh+0x5e>
		}
	}

	// Disable Write
	WRITE_EN_GPIO_Port->ODR |= WRITE_EN_Pin;	// Set WRITE_EN_Pin
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <_ZN16MemoryController5floodEh+0xcc>)
 8000d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d56:	6153      	str	r3, [r2, #20]
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020014 	.word	0x40020014
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800

08000d70 <_ZN16MemoryController6enableEv>:
	OUT_EN_GPIO_Port->ODR = OUT_EN_GPIO_Port->ODR |= OUT_EN_Pin;	// Set OUT_EN_Pin

	return wrong_count;
}

void MemoryController::enable() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	// Enable Memory 1
	HAL_GPIO_WritePin(_CE_GPIO_Port, _CE_Pin, GPIO_PIN_RESET);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	889b      	ldrh	r3, [r3, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	f000 ff44 	bl	8001c10 <HAL_GPIO_WritePin>
	en_state = ENABLED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	71da      	strb	r2, [r3, #7]
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_MspInit+0x58>)
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_MspInit+0x58>)
 8000da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da8:	6253      	str	r3, [r2, #36]	; 0x24
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_MspInit+0x58>)
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_MspInit+0x58>)
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_MspInit+0x58>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6213      	str	r3, [r2, #32]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_MspInit+0x58>)
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x58>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_MspInit+0x58>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_MspInit+0x58>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x74>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d124      	bne.n	8000e60 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0x78>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB13     ------> ADC_IN19
    PB14     ------> ADC_IN20
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_ADC_MspInit+0x7c>)
 8000e5c:	f000 fd58 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012400 	.word	0x40012400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020400 	.word	0x40020400

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_I2C_MspInit+0x7c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d127      	bne.n	8000ee6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eae:	23c0      	movs	r3, #192	; 0xc0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb2:	2312      	movs	r3, #18
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_I2C_MspInit+0x84>)
 8000eca:	f000 fd21 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_I2C_MspInit+0x80>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400

08000efc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_RTC_MspInit+0x30>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10a      	bne.n	8000f24 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_RTC_MspInit+0x34>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fcc2 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 fcdb 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40002800 	.word	0x40002800
 8000f30:	424706d8 	.word	0x424706d8

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x34>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_UART_MspInit+0x84>)
 8000fe0:	f000 fc96 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f88b 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <RTC_WKUP_IRQHandler+0x10>)
 800104e:	f002 f94b 	bl	80032e8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000d0 	.word	0x200000d0

0800105c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800108e:	f7ff ffe5 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f002 fcef 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fa13 	bl	80004c0 <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a4:	08003b18 	.word	0x08003b18
  ldr r2, =_sbss
 80010a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010ac:	2000018c 	.word	0x2000018c

080010b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_IRQHandler>

080010b2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 fbe5 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 f80e 	bl	80010e4 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e001      	b.n	80010d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d4:	f7ff fe60 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_InitTick+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d022      	beq.n	800113e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_InitTick+0x6c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_InitTick+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001104:	fbb1 f3f3 	udiv	r3, r1, r3
 8001108:	fbb2 f3f3 	udiv	r3, r2, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fbf2 	bl	80018f6 <HAL_SYSTICK_Config>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	d809      	bhi.n	8001132 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111e:	2200      	movs	r2, #0
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001126:	f000 fbbc 	bl	80018a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_InitTick+0x70>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e007      	b.n	8001142 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e004      	b.n	8001142 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e001      	b.n	8001142 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000008 	.word	0x20000008
 8001150:	20000000 	.word	0x20000000
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x1c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x20>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x1c>)
 8001168:	6013      	str	r3, [r2, #0]
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000188 	.word	0x20000188
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <HAL_GetTick+0x10>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000188 	.word	0x20000188

08001190 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_SuspendTick+0x18>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <HAL_SuspendTick+0x18>)
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_ResumeTick+0x18>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_ResumeTick+0x18>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e127      	b.n	8001438 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d115      	bne.n	8001222 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <HAL_ADC_Init+0x278>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a8d      	ldr	r2, [pc, #564]	; (8001440 <HAL_ADC_Init+0x278>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_ADC_Init+0x278>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fde9 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 80ff 	bne.w	800142e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	f043 0202 	orr.w	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001244:	4b7f      	ldr	r3, [pc, #508]	; (8001444 <HAL_ADC_Init+0x27c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	497c      	ldr	r1, [pc, #496]	; (8001444 <HAL_ADC_Init+0x27c>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800125e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001266:	4619      	mov	r1, r3
 8001268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001282:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001288:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80012aa:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80012ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ae:	4313      	orrs	r3, r2
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d007      	beq.n	80012ca <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c6:	4313      	orrs	r3, r2
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d4:	2b40      	cmp	r3, #64	; 0x40
 80012d6:	d04f      	beq.n	8001378 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012de:	4313      	orrs	r3, r2
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80012ea:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6912      	ldr	r2, [r2, #16]
 80012f0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80012f4:	d003      	beq.n	80012fe <HAL_ADC_Init+0x136>
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6912      	ldr	r2, [r2, #16]
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d102      	bne.n	8001304 <HAL_ADC_Init+0x13c>
 80012fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001302:	e000      	b.n	8001306 <HAL_ADC_Init+0x13e>
 8001304:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001306:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800130a:	4313      	orrs	r3, r2
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d125      	bne.n	8001364 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800131e:	2b00      	cmp	r3, #0
 8001320:	d114      	bne.n	800134c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	3b01      	subs	r3, #1
 8001328:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800132c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	fa92 f2a2 	rbit	r2, r2
 8001334:	617a      	str	r2, [r7, #20]
  return result;
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	fab2 f282 	clz	r2, r2
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	4093      	lsls	r3, r2
 8001340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001346:	4313      	orrs	r3, r2
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
 800134a:	e00b      	b.n	8001364 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_ADC_Init+0x280>)
 800136c:	4013      	ands	r3, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001374:	430b      	orrs	r3, r1
 8001376:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_ADC_Init+0x284>)
 8001380:	4013      	ands	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001388:	430b      	orrs	r3, r1
 800138a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d003      	beq.n	800139e <HAL_ADC_Init+0x1d6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d119      	bne.n	80013d2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	3b01      	subs	r3, #1
 80013ae:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80013b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	fa92 f2a2 	rbit	r2, r2
 80013ba:	60fa      	str	r2, [r7, #12]
  return result;
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	fab2 f282 	clz	r2, r2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	fa03 f202 	lsl.w	r2, r3, r2
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	e007      	b.n	80013e2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_ADC_Init+0x288>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d10b      	bne.n	800140a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f023 0303 	bic.w	r3, r3, #3
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	64da      	str	r2, [r3, #76]	; 0x4c
 8001408:	e014      	b.n	8001434 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f023 0312 	bic.w	r3, r3, #18
 8001412:	f043 0210 	orr.w	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800142c:	e002      	b.n	8001434 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001438:	4618      	mov	r0, r3
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40012700 	.word	0x40012700
 8001448:	fcfc16ff 	.word	0xfcfc16ff
 800144c:	c0fff18d 	.word	0xc0fff18d
 8001450:	bf80fffe 	.word	0xbf80fffe

08001454 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x20>
 8001470:	2302      	movs	r3, #2
 8001472:	e134      	b.n	80016de <HAL_ADC_ConfigChannel+0x28a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d81c      	bhi.n	80014be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b05      	subs	r3, #5
 8001496:	221f      	movs	r2, #31
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	4019      	ands	r1, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	3b05      	subs	r3, #5
 80014b0:	fa00 f203 	lsl.w	r2, r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
 80014bc:	e07e      	b.n	80015bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d81c      	bhi.n	8001500 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b23      	subs	r3, #35	; 0x23
 80014d8:	221f      	movs	r2, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	4019      	ands	r1, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b23      	subs	r3, #35	; 0x23
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80014fe:	e05d      	b.n	80015bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d81c      	bhi.n	8001542 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b41      	subs	r3, #65	; 0x41
 800151a:	221f      	movs	r2, #31
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	4019      	ands	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b41      	subs	r3, #65	; 0x41
 8001534:	fa00 f203 	lsl.w	r2, r0, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
 8001540:	e03c      	b.n	80015bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b18      	cmp	r3, #24
 8001548:	d81c      	bhi.n	8001584 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b5f      	subs	r3, #95	; 0x5f
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	4019      	ands	r1, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3b5f      	subs	r3, #95	; 0x5f
 8001576:	fa00 f203 	lsl.w	r2, r0, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	e01b      	b.n	80015bc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b7d      	subs	r3, #125	; 0x7d
 8001596:	221f      	movs	r2, #31
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b7d      	subs	r3, #125	; 0x7d
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d81a      	bhi.n	80015fa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6959      	ldr	r1, [r3, #20]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	2207      	movs	r2, #7
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	4019      	ands	r1, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6898      	ldr	r0, [r3, #8]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	fa00 f203 	lsl.w	r2, r0, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	e042      	b.n	8001680 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b13      	cmp	r3, #19
 8001600:	d81c      	bhi.n	800163c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6919      	ldr	r1, [r3, #16]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	3b1e      	subs	r3, #30
 8001614:	2207      	movs	r2, #7
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	4019      	ands	r1, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6898      	ldr	r0, [r3, #8]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e021      	b.n	8001680 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b1a      	cmp	r3, #26
 8001642:	d81c      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	3b3c      	subs	r3, #60	; 0x3c
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	4019      	ands	r1, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6898      	ldr	r0, [r3, #8]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	3b3c      	subs	r3, #60	; 0x3c
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	e000      	b.n	8001680 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800167e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b10      	cmp	r3, #16
 8001686:	d003      	beq.n	8001690 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800168c:	2b11      	cmp	r3, #17
 800168e:	d121      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_ADC_ConfigChannel+0x294>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d11b      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_ADC_ConfigChannel+0x294>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_ADC_ConfigChannel+0x294>)
 80016a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d111      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_ADC_ConfigChannel+0x298>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_ADC_ConfigChannel+0x29c>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0c9a      	lsrs	r2, r3, #18
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016c6:	e002      	b.n	80016ce <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40012700 	.word	0x40012700
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4906      	ldr	r1, [pc, #24]	; (800178c <__NVIC_EnableIRQ+0x34>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800186c:	f7ff ff90 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff2d 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff42 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff35 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001926:	e154      	b.n	8001bd2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8146 	beq.w	8001bcc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d005      	beq.n	8001958 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001954:	2b02      	cmp	r3, #2
 8001956:	d130      	bne.n	80019ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800198e:	2201      	movs	r2, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 0201 	and.w	r2, r3, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d017      	beq.n	80019f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d123      	bne.n	8001a4a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	08da      	lsrs	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3208      	adds	r2, #8
 8001a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	6939      	ldr	r1, [r7, #16]
 8001a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0203 	and.w	r2, r3, #3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a0 	beq.w	8001bcc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8c:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aa4:	4a53      	ldr	r2, [pc, #332]	; (8001bf4 <HAL_GPIO_Init+0x2e4>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d019      	beq.n	8001b04 <HAL_GPIO_Init+0x1f4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_GPIO_Init+0x1f0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00d      	beq.n	8001afc <HAL_GPIO_Init+0x1ec>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d007      	beq.n	8001af8 <HAL_GPIO_Init+0x1e8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x2f8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_GPIO_Init+0x1e4>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e008      	b.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001af4:	2305      	movs	r3, #5
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e004      	b.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001b04:	2300      	movs	r3, #0
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	f002 0203 	and.w	r2, r2, #3
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	4093      	lsls	r3, r2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b16:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x2e4>)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b72:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f aea3 	bne.w	8001928 <HAL_GPIO_Init+0x18>
  }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e12b      	b.n	8001eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff f904 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca4:	f000 fe68 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8001ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4a81      	ldr	r2, [pc, #516]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d807      	bhi.n	8001cc4 <HAL_I2C_Init+0x84>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a80      	ldr	r2, [pc, #512]	; (8001eb8 <HAL_I2C_Init+0x278>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	bf94      	ite	ls
 8001cbc:	2301      	movls	r3, #1
 8001cbe:	2300      	movhi	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e006      	b.n	8001cd2 <HAL_I2C_Init+0x92>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a7d      	ldr	r2, [pc, #500]	; (8001ebc <HAL_I2C_Init+0x27c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf94      	ite	ls
 8001ccc:	2301      	movls	r3, #1
 8001cce:	2300      	movhi	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0e7      	b.n	8001eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <HAL_I2C_Init+0x280>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d802      	bhi.n	8001d14 <HAL_I2C_Init+0xd4>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3301      	adds	r3, #1
 8001d12:	e009      	b.n	8001d28 <HAL_I2C_Init+0xe8>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_I2C_Init+0x284>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	3301      	adds	r3, #1
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	495c      	ldr	r1, [pc, #368]	; (8001eb4 <HAL_I2C_Init+0x274>)
 8001d44:	428b      	cmp	r3, r1
 8001d46:	d819      	bhi.n	8001d7c <HAL_I2C_Init+0x13c>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e59      	subs	r1, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_I2C_Init+0x138>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e59      	subs	r1, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d76:	e051      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e04f      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_I2C_Init+0x168>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e012      	b.n	8001dce <HAL_I2C_Init+0x18e>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Init+0x196>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e022      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <HAL_I2C_Init+0x1bc>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1e58      	subs	r0, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	440b      	add	r3, r1
 8001dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfa:	e00f      	b.n	8001e1c <HAL_I2C_Init+0x1dc>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	6809      	ldr	r1, [r1, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6911      	ldr	r1, [r2, #16]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68d2      	ldr	r2, [r2, #12]
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	000186a0 	.word	0x000186a0
 8001eb8:	001e847f 	.word	0x001e847f
 8001ebc:	003d08ff 	.word	0x003d08ff
 8001ec0:	431bde83 	.word	0x431bde83
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_PWR_EnterSTOPMode+0x50>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0203 	bic.w	r2, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <HAL_PWR_EnterSTOPMode+0x50>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_PWR_EnterSTOPMode+0x54>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_PWR_EnterSTOPMode+0x54>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001ef6:	bf30      	wfi
 8001ef8:	e002      	b.n	8001f00 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001efa:	bf40      	sev
    __WFE();
 8001efc:	bf20      	wfe
    __WFE();
 8001efe:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_PWR_EnterSTOPMode+0x54>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_PWR_EnterSTOPMode+0x54>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	6113      	str	r3, [r2, #16]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e31d      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b94      	ldr	r3, [pc, #592]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b91      	ldr	r3, [pc, #580]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d07b      	beq.n	800204a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d006      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06a      	beq.n	8002048 <HAL_RCC_OscConfig+0x128>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d166      	bne.n	8002048 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e2f7      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x74>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e02d      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x96>
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xb8>
 8001fbe:	4b71      	ldr	r3, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a70      	ldr	r2, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f8c0 	bl	800117c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f8bc 	bl	800117c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e2ad      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f8ac 	bl	800117c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff f8a8 	bl	800117c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e299      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x108>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d05a      	beq.n	800210c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d119      	bne.n	8002096 <HAL_RCC_OscConfig+0x176>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d116      	bne.n	8002096 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x160>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e276      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	493d      	ldr	r1, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002094:	e03a      	b.n	800210c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCC_OscConfig+0x268>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f86a 	bl	800117c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f866 	bl	800117c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e257      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	492a      	ldr	r1, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
 80020de:	e015      	b.n	800210c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_OscConfig+0x268>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff f849 	bl	800117c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f845 	bl	800117c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e236      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80b8 	beq.w	800228a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d170      	bne.n	8002202 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_OscConfig+0x218>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e21a      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002144:	429a      	cmp	r2, r3
 8002146:	d921      	bls.n	800218c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fc3b 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e208      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	4901      	ldr	r1, [pc, #4]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e020      	b.n	80021c6 <HAL_RCC_OscConfig+0x2a6>
 8002184:	40023800 	.word	0x40023800
 8002188:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	4b99      	ldr	r3, [pc, #612]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4996      	ldr	r1, [pc, #600]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	4991      	ldr	r1, [pc, #580]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fc06 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1d3      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	0b5b      	lsrs	r3, r3, #13
 80021cc:	3301      	adds	r3, #1
 80021ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021d6:	4a87      	ldr	r2, [pc, #540]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	0912      	lsrs	r2, r2, #4
 80021dc:	f002 020f 	and.w	r2, r2, #15
 80021e0:	4985      	ldr	r1, [pc, #532]	; (80023f8 <HAL_RCC_OscConfig+0x4d8>)
 80021e2:	5c8a      	ldrb	r2, [r1, r2]
 80021e4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021e6:	4a85      	ldr	r2, [pc, #532]	; (80023fc <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <HAL_RCC_OscConfig+0x4e0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe ff78 	bl	80010e4 <HAL_InitTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d045      	beq.n	800228a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	e1b5      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d029      	beq.n	800225e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220a:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x4e4>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe ffb4 	bl	800117c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7fe ffb0 	bl	800117c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1a1      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	496c      	ldr	r1, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	4967      	ldr	r1, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800225e:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x4e4>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ff8a 	bl	800117c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800226c:	f7fe ff86 	bl	800117c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e177      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x4e8>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff6a 	bl	800117c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe ff66 	bl	800117c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e157      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x38c>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ff53 	bl	800117c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe ff4f 	bl	800117c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e140      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80b5 	beq.w	8002470 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6253      	str	r3, [r2, #36]	; 0x24
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7fe ff17 	bl	800117c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe ff13 	bl	800117c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e104      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_OscConfig+0x4ec>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x466>
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6353      	str	r3, [r2, #52]	; 0x34
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x488>
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 8002394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002398:	6353      	str	r3, [r2, #52]	; 0x34
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a4:	6353      	str	r3, [r2, #52]	; 0x34
 80023a6:	e01c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x4aa>
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6353      	str	r3, [r2, #52]	; 0x34
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6353      	str	r3, [r2, #52]	; 0x34
 80023c8:	e00b      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	6353      	str	r3, [r2, #52]	; 0x34
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x4d4>)
 80023dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023e0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fec7 	bl	800117c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f0:	e019      	b.n	8002426 <HAL_RCC_OscConfig+0x506>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08003af0 	.word	0x08003af0
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004
 8002404:	42470020 	.word	0x42470020
 8002408:	42470680 	.word	0x42470680
 800240c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe feb4 	bl	800117c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0a3      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCC_OscConfig+0x4f0>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fea2 	bl	800117c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe9e 	bl	800117c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e08d      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d079      	beq.n	800256c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d056      	beq.n	800252c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b02      	cmp	r3, #2
 8002484:	d13b      	bne.n	80024fe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fe76 	bl	800117c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe fe72 	bl	800117c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e063      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	4319      	orrs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	430b      	orrs	r3, r1
 80024ca:	492b      	ldr	r1, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe51 	bl	800117c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fe4d 	bl	800117c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e03e      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x5be>
 80024fc:	e036      	b.n	800256c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe3a 	bl	800117c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fe36 	bl	800117c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e027      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x5ec>
 800252a:	e01f      	b.n	800256c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	429a      	cmp	r2, r3
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	42470060 	.word	0x42470060

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e11a      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d919      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x34>
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a89      	ldr	r2, [pc, #548]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 0201 	bic.w	r2, r3, #1
 80025bc:	4985      	ldr	r1, [pc, #532]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c4:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0f9      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	497a      	ldr	r1, [pc, #488]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 808e 	beq.w	800271e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260a:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d121      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0d7      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0cb      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0bf      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0b7      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	495c      	ldr	r1, [pc, #368]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fd86 	bl	800117c <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d112      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fd7e 	bl	800117c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e09b      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_ClockConfig+0xfc>
 800269e:	e03e      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fd67 	bl	800117c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e084      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_ClockConfig+0x12a>
 80026cc:	e027      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11d      	bne.n	8002712 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fd50 	bl	800117c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e06d      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x158>
 80026fa:	e010      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fd3e 	bl	800117c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e05b      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d219      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_ClockConfig+0x1be>
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e034      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4917      	ldr	r1, [pc, #92]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	490f      	ldr	r1, [pc, #60]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800279e:	f000 f823 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc90 	bl	80010e4 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80027c8:	7afb      	ldrb	r3, [r7, #11]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08003af0 	.word	0x08003af0
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b08e      	sub	sp, #56	; 0x38
 80027ee:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80027f0:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_GetSysClockFreq+0x16c>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d00d      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002800:	2b0c      	cmp	r3, #12
 8002802:	f200 8092 	bhi.w	800292a <HAL_RCC_GetSysClockFreq+0x142>
 8002806:	2b04      	cmp	r3, #4
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x28>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x2e>
 800280e:	e08c      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_GetSysClockFreq+0x170>)
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002814:	e097      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b51      	ldr	r3, [pc, #324]	; (800295c <HAL_RCC_GetSysClockFreq+0x174>)
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800281a:	e094      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	f003 020f 	and.w	r2, r3, #15
 8002824:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <HAL_RCC_GetSysClockFreq+0x178>)
 8002826:	5c9b      	ldrb	r3, [r3, r2]
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	0d9b      	lsrs	r3, r3, #22
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d021      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	2200      	movs	r2, #0
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	61fa      	str	r2, [r7, #28]
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <HAL_RCC_GetSysClockFreq+0x174>)
 800284c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002850:	464a      	mov	r2, r9
 8002852:	fb03 f202 	mul.w	r2, r3, r2
 8002856:	2300      	movs	r3, #0
 8002858:	4644      	mov	r4, r8
 800285a:	fb04 f303 	mul.w	r3, r4, r3
 800285e:	4413      	add	r3, r2
 8002860:	4a3e      	ldr	r2, [pc, #248]	; (800295c <HAL_RCC_GetSysClockFreq+0x174>)
 8002862:	4644      	mov	r4, r8
 8002864:	fba4 0102 	umull	r0, r1, r4, r2
 8002868:	440b      	add	r3, r1
 800286a:	4619      	mov	r1, r3
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	2200      	movs	r2, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	617a      	str	r2, [r7, #20]
 8002874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002878:	f7fd fc80 	bl	800017c <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
 8002884:	e04e      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	2200      	movs	r2, #0
 800288a:	469a      	mov	sl, r3
 800288c:	4693      	mov	fp, r2
 800288e:	4652      	mov	r2, sl
 8002890:	465b      	mov	r3, fp
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	ebb2 080a 	subs.w	r8, r2, sl
 80028aa:	eb63 090b 	sbc.w	r9, r3, fp
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028c2:	ebb2 0408 	subs.w	r4, r2, r8
 80028c6:	eb63 0509 	sbc.w	r5, r3, r9
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	00eb      	lsls	r3, r5, #3
 80028d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d8:	00e2      	lsls	r2, r4, #3
 80028da:	4614      	mov	r4, r2
 80028dc:	461d      	mov	r5, r3
 80028de:	eb14 030a 	adds.w	r3, r4, sl
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	eb45 030b 	adc.w	r3, r5, fp
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028f6:	4629      	mov	r1, r5
 80028f8:	028b      	lsls	r3, r1, #10
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	4604      	mov	r4, r0
 8002900:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002904:	4601      	mov	r1, r0
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2200      	movs	r2, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002918:	f7fd fc30 	bl	800017c <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002928:	e00d      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_GetSysClockFreq+0x16c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	3301      	adds	r3, #1
 800293a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002948:	4618      	mov	r0, r3
 800294a:	3738      	adds	r7, #56	; 0x38
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	016e3600 	.word	0x016e3600
 8002960:	08003ae4 	.word	0x08003ae4

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <HAL_RCC_GetHCLKFreq+0x10>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff2 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08003b00 	.word	0x08003b00

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffde 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0adb      	lsrs	r3, r3, #11
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08003b00 	.word	0x08003b00

080029c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d12c      	bne.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	e016      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6253      	str	r3, [r2, #36]	; 0x24
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a18:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002a2c:	d105      	bne.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a34:	d101      	bne.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a36:	2301      	movs	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 0201 	bic.w	r2, r3, #1
 8002a54:	490b      	ldr	r1, [pc, #44]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b8 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b5a      	ldr	r3, [pc, #360]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	4a59      	ldr	r2, [pc, #356]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6253      	str	r3, [r2, #36]	; 0x24
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fb4b 	bl	800117c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fb47 	bl	800117c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e089      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002b10:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d00f      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e067      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b48:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d02d      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d027      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b72:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d014      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe faf4 	bl	800117c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	e00a      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe faf0 	bl	800117c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e030      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ee      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	424706dc 	.word	0x424706dc

08002c24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e083      	b.n	8002d3e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7f5b      	ldrb	r3, [r3, #29]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe f958 	bl	8000efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	22ca      	movs	r2, #202	; 0xca
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2253      	movs	r2, #83	; 0x53
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f9ee 	bl	8003044 <RTC_EnterInitMode>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e05e      	b.n	8002d3e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6919      	ldr	r1, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cde:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10e      	bne.n	8002d0c <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f97b 	bl	8002fea <HAL_RTC_WaitForSynchro>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ff      	movs	r2, #255	; 0xff
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e018      	b.n	8002d3e <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d46:	b590      	push	{r4, r7, lr}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	7f1b      	ldrb	r3, [r3, #28]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_RTC_SetTime+0x18>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0a3      	b.n	8002ea6 <HAL_RTC_SetTime+0x160>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2202      	movs	r2, #2
 8002d68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d126      	bne.n	8002dbe <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f985 	bl	8003098 <RTC_ByteToBcd2>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f97e 	bl	8003098 <RTC_ByteToBcd2>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002da0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f976 	bl	8003098 <RTC_ByteToBcd2>
 8002dac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	78db      	ldrb	r3, [r3, #3]
 8002db6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e018      	b.n	8002df0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002de4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	78db      	ldrb	r3, [r3, #3]
 8002dea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	22ca      	movs	r2, #202	; 0xca
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2253      	movs	r2, #83	; 0x53
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f91f 	bl	8003044 <RTC_EnterInitMode>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2204      	movs	r2, #4
 8002e18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e040      	b.n	8002ea6 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8bc 	bl	8002fea <HAL_RTC_WaitForSynchro>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2204      	movs	r2, #4
 8002e84:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}

08002eae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002eae:	b590      	push	{r4, r7, lr}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	7f1b      	ldrb	r3, [r3, #28]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RTC_SetDate+0x18>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e08d      	b.n	8002fe2 <HAL_RTC_SetDate+0x134>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_RTC_SetDate+0x48>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	785b      	ldrb	r3, [r3, #1]
 8002ee8:	f023 0310 	bic.w	r3, r3, #16
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	330a      	adds	r3, #10
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11c      	bne.n	8002f36 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f8c9 	bl	8003098 <RTC_ByteToBcd2>
 8002f06:	4603      	mov	r3, r0
 8002f08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f8c2 	bl	8003098 <RTC_ByteToBcd2>
 8002f14:	4603      	mov	r3, r0
 8002f16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f8ba 	bl	8003098 <RTC_ByteToBcd2>
 8002f24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e00e      	b.n	8002f54 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	78db      	ldrb	r3, [r3, #3]
 8002f3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f42:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	22ca      	movs	r2, #202	; 0xca
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2253      	movs	r2, #83	; 0x53
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f86d 	bl	8003044 <RTC_EnterInitMode>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e02c      	b.n	8002fe2 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f96:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f81e 	bl	8002fea <HAL_RTC_WaitForSynchro>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e00a      	b.n	8002fe2 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}

08002fea <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11c      	bne.n	800303a <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800300e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003010:	f7fe f8b4 	bl	800117c <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003016:	e009      	b.n	800302c <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003018:	f7fe f8b0 	bl	800117c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003026:	d901      	bls.n	800302c <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e007      	b.n	800303c <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ee      	beq.n	8003018 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003062:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003064:	f7fe f88a 	bl	800117c <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800306a:	e009      	b.n	8003080 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800306c:	f7fe f886 	bl	800117c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307a:	d901      	bls.n	8003080 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e007      	b.n	8003090 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 80030aa:	e005      	b.n	80030b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	3b0a      	subs	r3, #10
 80030b6:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	2b09      	cmp	r3, #9
 80030bc:	d8f6      	bhi.n	80030ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b2db      	uxtb	r3, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	7f1b      	ldrb	r3, [r3, #28]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e09e      	b.n	800322e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2202      	movs	r2, #2
 80030fa:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	22ca      	movs	r2, #202	; 0xca
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2253      	movs	r2, #83	; 0x53
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01e      	beq.n	8003158 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
  {
    tickstart = HAL_GetTick();
 800311a:	f7fe f82f 	bl	800117c <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003120:	e013      	b.n	800314a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003122:	f7fe f82b 	bl	800117c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003130:	d90b      	bls.n	800314a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2203      	movs	r2, #3
 800313e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e071      	b.n	800322e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e4      	bne.n	8003122 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003178:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800317a:	f7fd ffff 	bl	800117c <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003180:	e013      	b.n	80031aa <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003182:	f7fd fffb 	bl	800117c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003190:	d90b      	bls.n	80031aa <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2203      	movs	r2, #3
 800319e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e041      	b.n	800322e <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0e4      	beq.n	8003182 <HAL_RTCEx_SetWakeUpTimer_IT+0xaa>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0207 	bic.w	r2, r2, #7
 80031ce:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80031e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ea:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003206:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003216:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7f1b      	ldrb	r3, [r3, #28]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_RTCEx_DeactivateWakeUpTimer+0x14>
 800324c:	2302      	movs	r3, #2
 800324e:	e047      	b.n	80032e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	22ca      	movs	r2, #202	; 0xca
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2253      	movs	r2, #83	; 0x53
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800328a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800328c:	f7fd ff76 	bl	800117c <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003292:	e013      	b.n	80032bc <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003294:	f7fd ff72 	bl	800117c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a2:	d90b      	bls.n	80032bc <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2203      	movs	r2, #3
 80032b0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e011      	b.n	80032e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0e4      	beq.n	8003294 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	22ff      	movs	r2, #255	; 0xff
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f816 	bl	8003330 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003314:	60da      	str	r2, [r3, #12]
  }


  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800331c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	775a      	strb	r2, [r3, #29]
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e031      	b.n	80033b8 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fd fde3 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 f92b 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_Base_Start+0x48>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <HAL_TIM_Base_Start+0x88>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_TIM_Base_Start+0x48>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_TIM_Base_Start+0x8c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start+0x48>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_TIM_Base_Start+0x90>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d010      	beq.n	800343c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342a:	e007      	b.n	800343c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40010800 	.word	0x40010800

08003454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIM_ConfigClockSource+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e0b3      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x180>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800348a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a4:	d03e      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0xd0>
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034aa:	f200 8087 	bhi.w	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	f000 8085 	beq.w	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d87f      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d01a      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0xa2>
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d87b      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d050      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x116>
 80034c8:	2b60      	cmp	r3, #96	; 0x60
 80034ca:	d877      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b50      	cmp	r3, #80	; 0x50
 80034ce:	d03c      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xf6>
 80034d0:	2b50      	cmp	r3, #80	; 0x50
 80034d2:	d873      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d058      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x136>
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d86f      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d064      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x156>
 80034e0:	2b30      	cmp	r3, #48	; 0x30
 80034e2:	d86b      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d060      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x156>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d867      	bhi.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05c      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x156>
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d05a      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034f4:	e062      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6899      	ldr	r1, [r3, #8]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f000 f942 	bl	800378e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003518:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	609a      	str	r2, [r3, #8]
      break;
 8003522:	e04e      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6899      	ldr	r1, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f000 f92b 	bl	800378e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003546:	609a      	str	r2, [r3, #8]
      break;
 8003548:	e03b      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f8a2 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2150      	movs	r1, #80	; 0x50
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f8f9 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003568:	e02b      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f8c0 	bl	80036fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2160      	movs	r1, #96	; 0x60
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f8e9 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003588:	e01b      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f882 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f8d9 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 80035a8:	e00b      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f000 f8d0 	bl	800375a <TIM_ITRx_SetConfig>
        break;
 80035ba:	e002      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x28>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_Base_SetConfig+0xb0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x28>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a24      	ldr	r2, [pc, #144]	; (8003690 <TIM_Base_SetConfig+0xb4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d013      	beq.n	8003646 <TIM_Base_SetConfig+0x6a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1a      	ldr	r2, [pc, #104]	; (800368c <TIM_Base_SetConfig+0xb0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00f      	beq.n	8003646 <TIM_Base_SetConfig+0x6a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <TIM_Base_SetConfig+0xb4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0x6a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <TIM_Base_SetConfig+0xb8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0x6a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <TIM_Base_SetConfig+0xbc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0x6a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a16      	ldr	r2, [pc, #88]	; (800369c <TIM_Base_SetConfig+0xc0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40010800 	.word	0x40010800
 8003698:	40010c00 	.word	0x40010c00
 800369c:	40011000 	.word	0x40011000

080036a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 030a 	bic.w	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f023 0210 	bic.w	r2, r3, #16
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003726:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	031b      	lsls	r3, r3, #12
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003738:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	f043 0307 	orr.w	r3, r3, #7
 800377c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	460b      	mov	r3, r1
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e05f      	b.n	80038a4 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fd fbb9 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2224      	movs	r2, #36	; 0x24
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003814:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f848 	bl	80038ac <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020f 	bic.w	r2, r2, #15
 800384a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	7afa      	ldrb	r2, [r7, #11]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68d9      	ldr	r1, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038ec:	f023 030c 	bic.w	r3, r3, #12
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <UART_SetConfig+0x1c0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d103      	bne.n	8003922 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800391a:	f7ff f841 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	e002      	b.n	8003928 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7ff f829 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8003926:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	d14c      	bne.n	80039cc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	4a49      	ldr	r2, [pc, #292]	; (8003a70 <UART_SetConfig+0x1c4>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	0119      	lsls	r1, r3, #4
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <UART_SetConfig+0x1c4>)
 800396a:	fba3 0302 	umull	r0, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <UART_SetConfig+0x1c4>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800398a:	4419      	add	r1, r3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a2:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <UART_SetConfig+0x1c4>)
 80039a4:	fba3 0302 	umull	r0, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2064      	movs	r0, #100	; 0x64
 80039ac:	fb00 f303 	mul.w	r3, r0, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <UART_SetConfig+0x1c4>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 0207 	and.w	r2, r3, #7
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	440a      	add	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039ca:	e04a      	b.n	8003a62 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	441a      	add	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <UART_SetConfig+0x1c4>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	0119      	lsls	r1, r3, #4
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <UART_SetConfig+0x1c4>)
 8003a04:	fba3 0302 	umull	r0, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2064      	movs	r0, #100	; 0x64
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <UART_SetConfig+0x1c4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a22:	4419      	add	r1, r3
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x1c4>)
 8003a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	fb00 f303 	mul.w	r3, r0, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x1c4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	440a      	add	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	2600      	movs	r6, #0
 8003a78:	4d0c      	ldr	r5, [pc, #48]	; (8003aac <__libc_init_array+0x38>)
 8003a7a:	4c0d      	ldr	r4, [pc, #52]	; (8003ab0 <__libc_init_array+0x3c>)
 8003a7c:	1b64      	subs	r4, r4, r5
 8003a7e:	10a4      	asrs	r4, r4, #2
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	f000 f822 	bl	8003acc <_init>
 8003a88:	2600      	movs	r6, #0
 8003a8a:	4d0a      	ldr	r5, [pc, #40]	; (8003ab4 <__libc_init_array+0x40>)
 8003a8c:	4c0a      	ldr	r4, [pc, #40]	; (8003ab8 <__libc_init_array+0x44>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08003b10 	.word	0x08003b10
 8003ab0:	08003b10 	.word	0x08003b10
 8003ab4:	08003b10 	.word	0x08003b10
 8003ab8:	08003b14 	.word	0x08003b14

08003abc <memset>:
 8003abc:	4603      	mov	r3, r0
 8003abe:	4402      	add	r2, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <_init>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	bf00      	nop
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr

08003ad8 <_fini>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr
