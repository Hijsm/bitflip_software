
Da_Vinci_Bitflip_v1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bfc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08005d78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005d78  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013345  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002899  00000000  00000000  0003337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00035c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00036de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806a  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146bb  00000000  00000000  0004ff32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddb5  00000000  00000000  000645ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f23a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be4  00000000  00000000  000f23f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08005d20 	.word	0x08005d20

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08005d20 	.word	0x08005d20

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <_Z12process_datav>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	//do something here
	I2C_REGISTERS[0] = RxData[0];
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <_Z12process_datav+0x2c>)
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <_Z12process_datav+0x30>)
 800048e:	701a      	strb	r2, [r3, #0]
	if (I2C_REGISTERS[0] == 0x01) {
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <_Z12process_datav+0x30>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d106      	bne.n	80004a6 <_Z12process_datav+0x22>
		I2C_REGISTERS[1] = RxData[1];
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <_Z12process_datav+0x2c>)
 800049a:	785a      	ldrb	r2, [r3, #1]
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <_Z12process_datav+0x30>)
 800049e:	705a      	strb	r2, [r3, #1]
		I2C_REGISTERS[0] = 0x00;
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <_Z12process_datav+0x30>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000038 	.word	0x20000038
 80004b4:	20000028 	.word	0x20000028

080004b8 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f002 f9f2 	bl	80028aa <HAL_I2C_EnableListen_IT>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
 80004dc:	4613      	mov	r3, r2
 80004de:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d112      	bne.n	800050c <HAL_I2C_AddrCallback+0x3c>
	{
		rxcount = 0;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_I2C_AddrCallback+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
		countAddr++;
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <HAL_I2C_AddrCallback+0x78>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a15      	ldr	r2, [pc, #84]	; (8000548 <HAL_I2C_AddrCallback+0x78>)
 80004f4:	6013      	str	r3, [r2, #0]
		// receive using sequential function.
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <HAL_I2C_AddrCallback+0x74>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <HAL_I2C_AddrCallback+0x7c>)
 80004fe:	18d1      	adds	r1, r2, r3
 8000500:	2301      	movs	r3, #1
 8000502:	2201      	movs	r2, #1
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f002 f95e 	bl	80027c6 <HAL_I2C_Slave_Seq_Receive_IT>
		txcount = 0;
		startPosition = RxData[0];
		RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
	}
}
 800050a:	e016      	b.n	800053a <HAL_I2C_AddrCallback+0x6a>
		txcount = 0;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_I2C_AddrCallback+0x80>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_I2C_AddrCallback+0x7c>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_I2C_AddrCallback+0x84>)
 8000518:	701a      	strb	r2, [r3, #0]
		RxData[0] = 0;  // Reset the start register as we have already copied it
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_I2C_AddrCallback+0x7c>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_I2C_AddrCallback+0x84>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_I2C_AddrCallback+0x80>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_I2C_AddrCallback+0x88>)
 800052e:	1899      	adds	r1, r3, r2
 8000530:	2301      	movs	r3, #1
 8000532:	2201      	movs	r2, #1
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f002 f8d4 	bl	80026e2 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000003a 	.word	0x2000003a
 8000548:	20000040 	.word	0x20000040
 800054c:	20000038 	.word	0x20000038
 8000550:	2000003b 	.word	0x2000003b
 8000554:	2000003c 	.word	0x2000003c
 8000558:	20000028 	.word	0x20000028

0800055c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	rxcount++;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800056e:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d818      	bhi.n	80005aa <HAL_I2C_SlaveRxCpltCallback+0x4e>
	{
		if (rxcount == RxSIZE-1)
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10a      	bne.n	8000596 <HAL_I2C_SlaveRxCpltCallback+0x3a>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000588:	18d1      	adds	r1, r2, r3
 800058a:	2320      	movs	r3, #32
 800058c:	2201      	movs	r2, #1
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f002 f919 	bl	80027c6 <HAL_I2C_Slave_Seq_Receive_IT>
 8000594:	e009      	b.n	80005aa <HAL_I2C_SlaveRxCpltCallback+0x4e>
		}
		else
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800059e:	18d1      	adds	r1, r2, r3
 80005a0:	2304      	movs	r3, #4
 80005a2:	2201      	movs	r2, #1
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f002 f90e 	bl	80027c6 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d101      	bne.n	80005b6 <HAL_I2C_SlaveRxCpltCallback+0x5a>
	{
		process_data();
 80005b2:	f7ff ff67 	bl	8000484 <_Z12process_datav>
	}

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000003a 	.word	0x2000003a
 80005c4:	20000038 	.word	0x20000038

080005c8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	txcount++;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80005da:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 80005ea:	1899      	adds	r1, r3, r2
 80005ec:	2304      	movs	r3, #4
 80005ee:	2201      	movs	r2, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f002 f876 	bl	80026e2 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000003b 	.word	0x2000003b
 8000604:	2000003c 	.word	0x2000003c
 8000608:	20000028 	.word	0x20000028

0800060c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	counterror++;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <HAL_I2C_ErrorCallback+0x90>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <HAL_I2C_ErrorCallback+0x90>)
 800061c:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f002 fbbd 	bl	8002d9e <HAL_I2C_GetError>
 8000624:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d10d      	bne.n	8000648 <HAL_I2C_ErrorCallback+0x3c>
	{
		if (txcount == 0)  // error is while slave is receiving
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_I2C_ErrorCallback+0x94>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d105      	bne.n	8000640 <HAL_I2C_ErrorCallback+0x34>
			{
				rxcount = 0;  // Reset the rxcount for the next operation
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_I2C_ErrorCallback+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
				process_data();
 800063a:	f7ff ff23 	bl	8000484 <_Z12process_datav>
 800063e:	e026      	b.n	800068e <HAL_I2C_ErrorCallback+0x82>
			}
			else // error while slave is transmitting
			{
				txcount = 0;  // Reset the txcount for the next operation
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_I2C_ErrorCallback+0x94>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e022      	b.n	800068e <HAL_I2C_ErrorCallback+0x82>
			}
	} else if (errorcode == 2)  // ARLO Error
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d10e      	bne.n	800066c <HAL_I2C_ErrorCallback+0x60>
	{
		HAL_I2C_DeInit(hi2c);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f002 f804 	bl	800265c <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f001 febd 	bl	80023d4 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 800065a:	2202      	movs	r2, #2
 800065c:	2100      	movs	r1, #0
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <HAL_I2C_ErrorCallback+0x9c>)
 8000660:	f005 fb56 	bl	8005d10 <memset>
		rxcount =0;  // reset the count
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_I2C_ErrorCallback+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e010      	b.n	800068e <HAL_I2C_ErrorCallback+0x82>
	}
	else if (errorcode == 1)  // BERR Error
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d10d      	bne.n	800068e <HAL_I2C_ErrorCallback+0x82>
	{
		HAL_I2C_DeInit(hi2c);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f001 fff2 	bl	800265c <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f001 feab 	bl	80023d4 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 800067e:	2202      	movs	r2, #2
 8000680:	2100      	movs	r1, #0
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <HAL_I2C_ErrorCallback+0x9c>)
 8000684:	f005 fb44 	bl	8005d10 <memset>
		rxcount =0;  // reset the count
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_I2C_ErrorCallback+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
	}
	HAL_I2C_EnableListen_IT(hi2c);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f002 f90b 	bl	80028aa <HAL_I2C_EnableListen_IT>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000044 	.word	0x20000044
 80006a0:	2000003b 	.word	0x2000003b
 80006a4:	2000003a 	.word	0x2000003a
 80006a8:	20000038 	.word	0x20000038

080006ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b2:	f000 ff84 	bl	80015be <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b6:	f000 f98f 	bl	80009d8 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ba:	f000 fb7f 	bl	8000dbc <_ZL12MX_GPIO_Initv>
	MX_TIM10_Init();
 80006be:	f000 fb0b 	bl	8000cd8 <_ZL13MX_TIM10_Initv>
	MX_RTC_Init();
 80006c2:	f000 fa91 	bl	8000be8 <_ZL11MX_RTC_Initv>
	MX_I2C1_Init();
 80006c6:	f000 fa5b 	bl	8000b80 <_ZL12MX_I2C1_Initv>
	MX_ADC_Init();
 80006ca:	f000 f9f7 	bl	8000abc <_ZL11MX_ADC_Initv>
	MX_USART1_UART_Init();
 80006ce:	f000 fb47 	bl	8000d60 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim10); // Start TIM10 for microsecond delay function
 80006d2:	48bd      	ldr	r0, [pc, #756]	; (80009c8 <main+0x31c>)
 80006d4:	f004 ffba 	bl	800564c <HAL_TIM_Base_Start>

	MemoryController mem(M2_CE_GPIO_Port, M2_CE_Pin);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	49bb      	ldr	r1, [pc, #748]	; (80009cc <main+0x320>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fc47 	bl	8000f74 <_ZN16MemoryControllerC1EP12GPIO_TypeDeft>

	HAL_GPIO_WritePin(FET_CTRL_GPIO_Port, FET_CTRL_Pin, GPIO_PIN_RESET); // Control Latch up FET
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	48b7      	ldr	r0, [pc, #732]	; (80009cc <main+0x320>)
 80006ee:	f001 fe59 	bl	80023a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_CE_GPIO_Port, M1_CE_Pin | M2_CE_Pin | M3_CE_Pin,
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80006f8:	48b4      	ldr	r0, [pc, #720]	; (80009cc <main+0x320>)
 80006fa:	f001 fe53 	bl	80023a4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // Disable All Memory

	if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 80006fe:	48b4      	ldr	r0, [pc, #720]	; (80009d0 <main+0x324>)
 8000700:	f002 f8d3 	bl	80028aa <HAL_I2C_EnableListen_IT>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <main+0x6c>
		Error_Handler();
 8000714:	f000 fbdc 	bl	8000ed0 <Error_Handler>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		switch (I2C_REGISTERS[0]) {
 8000718:	4bae      	ldr	r3, [pc, #696]	; (80009d4 <main+0x328>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b80      	cmp	r3, #128	; 0x80
 800071e:	f000 8111 	beq.w	8000944 <main+0x298>
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	f300 814e 	bgt.w	80009c4 <main+0x318>
 8000728:	2b20      	cmp	r3, #32
 800072a:	dc47      	bgt.n	80007bc <main+0x110>
 800072c:	2b02      	cmp	r3, #2
 800072e:	f2c0 8149 	blt.w	80009c4 <main+0x318>
 8000732:	3b02      	subs	r3, #2
 8000734:	2b1e      	cmp	r3, #30
 8000736:	f200 8145 	bhi.w	80009c4 <main+0x318>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <main+0x94>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080009c5 	.word	0x080009c5
 8000748:	08000819 	.word	0x08000819
 800074c:	080009c5 	.word	0x080009c5
 8000750:	080009c5 	.word	0x080009c5
 8000754:	080009c5 	.word	0x080009c5
 8000758:	0800086d 	.word	0x0800086d
 800075c:	080009c5 	.word	0x080009c5
 8000760:	080009c5 	.word	0x080009c5
 8000764:	080009c5 	.word	0x080009c5
 8000768:	080009c5 	.word	0x080009c5
 800076c:	080009c5 	.word	0x080009c5
 8000770:	080009c5 	.word	0x080009c5
 8000774:	080009c5 	.word	0x080009c5
 8000778:	080008c1 	.word	0x080008c1
 800077c:	080009c5 	.word	0x080009c5
 8000780:	080009c5 	.word	0x080009c5
 8000784:	080009c5 	.word	0x080009c5
 8000788:	080009c5 	.word	0x080009c5
 800078c:	080009c5 	.word	0x080009c5
 8000790:	080009c5 	.word	0x080009c5
 8000794:	080009c5 	.word	0x080009c5
 8000798:	080009c5 	.word	0x080009c5
 800079c:	080009c5 	.word	0x080009c5
 80007a0:	080009c5 	.word	0x080009c5
 80007a4:	080009c5 	.word	0x080009c5
 80007a8:	080009c5 	.word	0x080009c5
 80007ac:	080009c5 	.word	0x080009c5
 80007b0:	080009c5 	.word	0x080009c5
 80007b4:	080009c5 	.word	0x080009c5
 80007b8:	080008ed 	.word	0x080008ed
 80007bc:	2b40      	cmp	r3, #64	; 0x40
 80007be:	f000 80ab 	beq.w	8000918 <main+0x26c>
			mem.disable();
			I2C_REGISTERS[0] = 0x83;
			break;
		}
		default:
			break;
 80007c2:	e0ff      	b.n	80009c4 <main+0x318>
			mem.set_CE(M1_CE_GPIO_Port, M1_CE_Pin);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ca:	4980      	ldr	r1, [pc, #512]	; (80009cc <main+0x320>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fbeb 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			uint32_t wrong_count = mem.check_for(I2C_REGISTERS[1]);
 80007d2:	4b80      	ldr	r3, [pc, #512]	; (80009d4 <main+0x328>)
 80007d4:	785a      	ldrb	r2, [r3, #1]
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fc6c 	bl	80010b8 <_ZN16MemoryController9check_forEh>
 80007e0:	60f8      	str	r0, [r7, #12]
			mem.disable();
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fcfe 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[2] = (wrong_count & 0x000000ff);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b79      	ldr	r3, [pc, #484]	; (80009d4 <main+0x328>)
 80007f0:	709a      	strb	r2, [r3, #2]
			I2C_REGISTERS[3] = (wrong_count & 0x0000ff00) >> 8;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b76      	ldr	r3, [pc, #472]	; (80009d4 <main+0x328>)
 80007fa:	70da      	strb	r2, [r3, #3]
			I2C_REGISTERS[4] = (wrong_count & 0x00ff0000) >> 16;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	0c1b      	lsrs	r3, r3, #16
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b74      	ldr	r3, [pc, #464]	; (80009d4 <main+0x328>)
 8000804:	711a      	strb	r2, [r3, #4]
			I2C_REGISTERS[5] = (wrong_count & 0xff000000) >> 24;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0e1b      	lsrs	r3, r3, #24
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b71      	ldr	r3, [pc, #452]	; (80009d4 <main+0x328>)
 800080e:	715a      	strb	r2, [r3, #5]
			I2C_REGISTERS[0] = 0x03;
 8000810:	4b70      	ldr	r3, [pc, #448]	; (80009d4 <main+0x328>)
 8000812:	2203      	movs	r2, #3
 8000814:	701a      	strb	r2, [r3, #0]
			break;
 8000816:	e0d6      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M2_CE_GPIO_Port, M2_CE_Pin);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081e:	496b      	ldr	r1, [pc, #428]	; (80009cc <main+0x320>)
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fbc1 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			uint32_t wrong_count = mem.check_for(I2C_REGISTERS[1]);
 8000826:	4b6b      	ldr	r3, [pc, #428]	; (80009d4 <main+0x328>)
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fc42 	bl	80010b8 <_ZN16MemoryController9check_forEh>
 8000834:	6138      	str	r0, [r7, #16]
			mem.disable();
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fcd4 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[6] = (wrong_count & 0x000000ff);
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <main+0x328>)
 8000844:	719a      	strb	r2, [r3, #6]
			I2C_REGISTERS[7] = (wrong_count & 0x0000ff00) >> 8;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b61      	ldr	r3, [pc, #388]	; (80009d4 <main+0x328>)
 800084e:	71da      	strb	r2, [r3, #7]
			I2C_REGISTERS[8] = (wrong_count & 0x00ff0000) >> 16;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	0c1b      	lsrs	r3, r3, #16
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b5f      	ldr	r3, [pc, #380]	; (80009d4 <main+0x328>)
 8000858:	721a      	strb	r2, [r3, #8]
			I2C_REGISTERS[9] = (wrong_count & 0xff000000) >> 24;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	0e1b      	lsrs	r3, r3, #24
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b5c      	ldr	r3, [pc, #368]	; (80009d4 <main+0x328>)
 8000862:	725a      	strb	r2, [r3, #9]
			I2C_REGISTERS[0] = 0x05;
 8000864:	4b5b      	ldr	r3, [pc, #364]	; (80009d4 <main+0x328>)
 8000866:	2205      	movs	r2, #5
 8000868:	701a      	strb	r2, [r3, #0]
			break;
 800086a:	e0ac      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M3_CE_GPIO_Port, M3_CE_Pin);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000872:	4956      	ldr	r1, [pc, #344]	; (80009cc <main+0x320>)
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fb97 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			uint32_t wrong_count = mem.check_for(I2C_REGISTERS[1]);
 800087a:	4b56      	ldr	r3, [pc, #344]	; (80009d4 <main+0x328>)
 800087c:	785a      	ldrb	r2, [r3, #1]
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fc18 	bl	80010b8 <_ZN16MemoryController9check_forEh>
 8000888:	6178      	str	r0, [r7, #20]
			mem.disable();
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fcaa 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[10] = (wrong_count & 0x000000ff);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <main+0x328>)
 8000898:	729a      	strb	r2, [r3, #10]
			I2C_REGISTERS[11] = (wrong_count & 0x0000ff00) >> 8;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <main+0x328>)
 80008a2:	72da      	strb	r2, [r3, #11]
			I2C_REGISTERS[12] = (wrong_count & 0x00ff0000) >> 16;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	0c1b      	lsrs	r3, r3, #16
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <main+0x328>)
 80008ac:	731a      	strb	r2, [r3, #12]
			I2C_REGISTERS[13] = (wrong_count & 0xff000000) >> 24;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	0e1b      	lsrs	r3, r3, #24
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b47      	ldr	r3, [pc, #284]	; (80009d4 <main+0x328>)
 80008b6:	735a      	strb	r2, [r3, #13]
			I2C_REGISTERS[0] = 0x09;
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <main+0x328>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	701a      	strb	r2, [r3, #0]
			break;
 80008be:	e082      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M1_CE_GPIO_Port, M1_CE_Pin);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	4941      	ldr	r1, [pc, #260]	; (80009cc <main+0x320>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fb6d 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <main+0x328>)
 80008d0:	785a      	ldrb	r2, [r3, #1]
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fb80 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fc81 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x11;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <main+0x328>)
 80008e6:	2211      	movs	r2, #17
 80008e8:	701a      	strb	r2, [r3, #0]
			break;
 80008ea:	e06c      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M2_CE_GPIO_Port, M2_CE_Pin);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f2:	4936      	ldr	r1, [pc, #216]	; (80009cc <main+0x320>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fb57 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <main+0x328>)
 80008fc:	785a      	ldrb	r2, [r3, #1]
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fb6a 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fc6b 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x21;
 8000910:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <main+0x328>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	701a      	strb	r2, [r3, #0]
			break;
 8000916:	e056      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M3_CE_GPIO_Port, M3_CE_Pin);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091e:	492b      	ldr	r1, [pc, #172]	; (80009cc <main+0x320>)
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fb41 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0x328>)
 8000928:	785a      	ldrb	r2, [r3, #1]
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fb54 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fc55 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x41;
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <main+0x328>)
 800093e:	2241      	movs	r2, #65	; 0x41
 8000940:	701a      	strb	r2, [r3, #0]
			break;
 8000942:	e040      	b.n	80009c6 <main+0x31a>
			mem.set_CE(M1_CE_GPIO_Port, M1_CE_Pin);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094a:	4920      	ldr	r1, [pc, #128]	; (80009cc <main+0x320>)
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fb2b 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <main+0x328>)
 8000954:	785a      	ldrb	r2, [r3, #1]
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fb3e 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fc3f 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x81;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <main+0x328>)
 800096a:	2281      	movs	r2, #129	; 0x81
 800096c:	701a      	strb	r2, [r3, #0]
			mem.set_CE(M2_CE_GPIO_Port, M2_CE_Pin);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000974:	4915      	ldr	r1, [pc, #84]	; (80009cc <main+0x320>)
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fb16 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <main+0x328>)
 800097e:	785a      	ldrb	r2, [r3, #1]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fb29 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fc2a 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x82;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <main+0x328>)
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	701a      	strb	r2, [r3, #0]
			mem.set_CE(M3_CE_GPIO_Port, M3_CE_Pin);
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099e:	490b      	ldr	r1, [pc, #44]	; (80009cc <main+0x320>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fb01 	bl	8000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>
			mem.flood(I2C_REGISTERS[1]);
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <main+0x328>)
 80009a8:	785a      	ldrb	r2, [r3, #1]
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fb14 	bl	8000fdc <_ZN16MemoryController5floodEh>
			mem.disable();
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fc15 	bl	80011e6 <_ZN16MemoryController7disableEv>
			I2C_REGISTERS[0] = 0x83;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <main+0x328>)
 80009be:	2283      	movs	r2, #131	; 0x83
 80009c0:	701a      	strb	r2, [r3, #0]
			break;
 80009c2:	e000      	b.n	80009c6 <main+0x31a>
			break;
 80009c4:	bf00      	nop
//	HAL_GPIO_TogglePin(FET_CTRL_GPIO_Port, FET_CTRL_Pin);

		// Enter STOP mode for stop_time seconds
//	stop_for_ms(stop_time);

	}
 80009c6:	e6a7      	b.n	8000718 <main+0x6c>
 80009c8:	20000110 	.word	0x20000110
 80009cc:	40020400 	.word	0x40020400
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	20000028 	.word	0x20000028

080009d8 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	; 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 f992 	bl	8005d10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <_Z18SystemClock_Configv+0xe0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a0c:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <_Z18SystemClock_Configv+0xe0>)
 8000a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a12:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000a14:	230a      	movs	r3, #10
 8000a16:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fc17 	bl	8004270 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_Z18SystemClock_Configv+0x7e>
		Error_Handler();
 8000a52:	f000 fa3d 	bl	8000ed0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 ff2d 	bl	80048d0 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <_Z18SystemClock_Configv+0xb2>
		Error_Handler();
 8000a86:	f000 fa23 	bl	8000ed0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	603b      	str	r3, [r7, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a92:	607b      	str	r3, [r7, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 f99e 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_Z18SystemClock_Configv+0xd8>
		Error_Handler();
 8000aac:	f000 fa10 	bl	8000ed0 <Error_Handler>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	; 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40007000 	.word	0x40007000

08000abc <_ZL11MX_ADC_Initv>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000ace:	4a2b      	ldr	r2, [pc, #172]	; (8000b7c <_ZL11MX_ADC_Initv+0xc0>)
 8000ad0:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad2:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b2e:	f000 fdb5 	bl	800169c <HAL_ADC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <_ZL11MX_ADC_Initv+0x8a>
		Error_Handler();
 8000b42:	f000 f9c5 	bl	8000ed0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_19;
 8000b46:	2313      	movs	r3, #19
 8000b48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <_ZL11MX_ADC_Initv+0xbc>)
 8000b58:	f000 fee6 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <_ZL11MX_ADC_Initv+0xb4>
		Error_Handler();
 8000b6c:	f000 f9b0 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000048 	.word	0x20000048
 8000b7c:	40012400 	.word	0x40012400

08000b80 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <_ZL12MX_I2C1_Initv+0x60>)
 8000b88:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <_ZL12MX_I2C1_Initv+0x64>)
 8000b8e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 200;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000b98:	22c8      	movs	r2, #200	; 0xc8
 8000b9a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <_ZL12MX_I2C1_Initv+0x5c>)
 8000bbe:	f001 fc09 	bl	80023d4 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bf14      	ite	ne
 8000bc8:	2301      	movne	r3, #1
 8000bca:	2300      	moveq	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8000bd2:	f000 f97d 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000009c 	.word	0x2000009c
 8000be0:	40005400 	.word	0x40005400
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <_ZL11MX_RTC_Initv>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c02:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <_ZL11MX_RTC_Initv+0xec>)
 8000c04:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c0e:	227f      	movs	r2, #127	; 0x7f
 8000c10:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000c2a:	4829      	ldr	r0, [pc, #164]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c2c:	f004 f9a2 	bl	8004f74 <HAL_RTC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <_ZL11MX_RTC_Initv+0x5c>
		Error_Handler();
 8000c40:	f000 f946 	bl	8000ed0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481c      	ldr	r0, [pc, #112]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c60:	f004 fa0b 	bl	800507a <HAL_RTC_SetTime>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <_ZL11MX_RTC_Initv+0x90>
		Error_Handler();
 8000c74:	f000 f92c 	bl	8000ed0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000c90:	f004 fa8d 	bl	80051ae <HAL_RTC_SetDate>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <_ZL11MX_RTC_Initv+0xc0>
		Error_Handler();
 8000ca4:	f000 f914 	bl	8000ed0 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4625, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f241 2111 	movw	r1, #4625	; 0x1211
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <_ZL11MX_RTC_Initv+0xe8>)
 8000cb0:	f004 fba0 	bl	80053f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000cb4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4625, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <_ZL11MX_RTC_Initv+0xe0>
		Error_Handler();
 8000cc4:	f000 f904 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	40002800 	.word	0x40002800

08000cd8 <_ZL13MX_TIM10_Initv>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <_ZL13MX_TIM10_Initv+0x84>)
 8000cee:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d02:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000d12:	f004 fc5c 	bl	80055ce <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_ZL13MX_TIM10_Initv+0x52>
		Error_Handler();
 8000d26:	f000 f8d3 	bl	8000ed0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK) {
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <_ZL13MX_TIM10_Initv+0x80>)
 8000d36:	f004 fcd3 	bl	80056e0 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_ZL13MX_TIM10_Initv+0x76>
		Error_Handler();
 8000d4a:	f000 f8c1 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000110 	.word	0x20000110
 8000d5c:	40010c00 	.word	0x40010c00

08000d60 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000d68:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d98:	f004 fe62 	bl	8005a60 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8000dac:	f000 f890 	bl	8000ed0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000150 	.word	0x20000150
 8000db8:	40013800 	.word	0x40013800

08000dbc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a3a      	ldr	r2, [pc, #232]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <_ZL12MX_GPIO_Initv+0x104>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e20:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e22:	f001 fabf 	bl	80023a4 <HAL_GPIO_WritePin>
					| ADDR_2_Pin | ADDR_3_Pin | ADDR_4_Pin | ADDR_5_Pin
					| ADDR_6_Pin | ADDR_7_Pin | ADDR_8_Pin | ADDR_9_Pin
					| ADDR_10_Pin | ADDR_11_Pin | ADDR_12_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000e26:	2200      	movs	r2, #0
 8000e28:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x10c>)
 8000e2e:	f001 fab9 	bl	80023a4 <HAL_GPIO_WritePin>
			IO_0_Pin | IO_1_Pin | IO_2_Pin | IO_3_Pin | IO_4_Pin | IO_5_Pin
					| IO_6_Pin | IO_7_Pin | OUT_EN_Pin | WRITE_EN_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000e32:	2200      	movs	r2, #0
 8000e34:	f641 7137 	movw	r1, #7991	; 0x1f37
 8000e38:	4824      	ldr	r0, [pc, #144]	; (8000ecc <_ZL12MX_GPIO_Initv+0x110>)
 8000e3a:	f001 fab3 	bl	80023a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADDR_13_Pin ADDR_14_Pin ADDR_15_Pin ADDR_0_Pin
	 ADDR_1_Pin ADDR_2_Pin ADDR_3_Pin ADDR_4_Pin
	 ADDR_5_Pin ADDR_6_Pin ADDR_7_Pin ADDR_8_Pin
	 ADDR_9_Pin ADDR_10_Pin ADDR_11_Pin ADDR_12_Pin */
	GPIO_InitStruct.Pin = ADDR_13_Pin | ADDR_14_Pin | ADDR_15_Pin | ADDR_0_Pin
 8000e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e42:	60fb      	str	r3, [r7, #12]
			| ADDR_1_Pin | ADDR_2_Pin | ADDR_3_Pin | ADDR_4_Pin | ADDR_5_Pin
			| ADDR_6_Pin | ADDR_7_Pin | ADDR_8_Pin | ADDR_9_Pin | ADDR_10_Pin
			| ADDR_11_Pin | ADDR_12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <_ZL12MX_GPIO_Initv+0x108>)
 8000e58:	f001 f844 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IO_0_Pin IO_1_Pin IO_2_Pin IO_3_Pin
	 IO_4_Pin IO_5_Pin IO_6_Pin IO_7_Pin
	 OUT_EN_Pin WRITE_EN_Pin */
	GPIO_InitStruct.Pin = IO_0_Pin | IO_1_Pin | IO_2_Pin | IO_3_Pin | IO_4_Pin
 8000e5c:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8000e60:	60fb      	str	r3, [r7, #12]
			| IO_5_Pin | IO_6_Pin | IO_7_Pin | OUT_EN_Pin | WRITE_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <_ZL12MX_GPIO_Initv+0x10c>)
 8000e76:	f001 f835 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ADDR_16_Pin ADDR_17_Pin ADDR_18_Pin M2_CE_Pin
	 M3_CE_Pin FET_CTRL_Pin ADDR_19_Pin ADDR_20_Pin
	 M1_CE_Pin */
	GPIO_InitStruct.Pin = ADDR_16_Pin | ADDR_17_Pin | ADDR_18_Pin | M2_CE_Pin
 8000e7a:	f641 6337 	movw	r3, #7735	; 0x1e37
 8000e7e:	60fb      	str	r3, [r7, #12]
			| M3_CE_Pin | FET_CTRL_Pin | ADDR_19_Pin | ADDR_20_Pin | M1_CE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <_ZL12MX_GPIO_Initv+0x110>)
 8000e94:	f001 f826 	bl	8001ee4 <HAL_GPIO_Init>

	/*Configure GPIO pin : WDI_Pin */
	GPIO_InitStruct.Pin = WDI_Pin;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WDI_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <_ZL12MX_GPIO_Initv+0x110>)
 8000eb2:	f001 f817 	bl	8001ee4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>
	...

08000edc <_Z14Set_IO_Outputsv>:
    while(TIM10->CNT < n);
}

GPIO_InitTypeDef GPIO_InitStruct = {0};

void Set_IO_Outputs() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin|IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_Z14Set_IO_Outputsv+0x28>)
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_Z14Set_IO_Outputsv+0x28>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <_Z14Set_IO_Outputsv+0x28>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_Z14Set_IO_Outputsv+0x28>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	4902      	ldr	r1, [pc, #8]	; (8000f04 <_Z14Set_IO_Outputsv+0x28>)
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <_Z14Set_IO_Outputsv+0x2c>)
 8000efc:	f000 fff2 	bl	8001ee4 <HAL_GPIO_Init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000198 	.word	0x20000198
 8000f08:	40020000 	.word	0x40020000

08000f0c <_Z13Set_IO_Inputsv>:

void Set_IO_Inputs() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = IO_0_Pin|IO_1_Pin|IO_2_Pin|IO_3_Pin|IO_4_Pin|IO_5_Pin|IO_6_Pin|IO_7_Pin;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_Z13Set_IO_Inputsv+0x24>)
 8000f12:	22ff      	movs	r2, #255	; 0xff
 8000f14:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <_Z13Set_IO_Inputsv+0x24>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <_Z13Set_IO_Inputsv+0x24>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	4903      	ldr	r1, [pc, #12]	; (8000f30 <_Z13Set_IO_Inputsv+0x24>)
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <_Z13Set_IO_Inputsv+0x28>)
 8000f26:	f000 ffdd 	bl	8001ee4 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000198 	.word	0x20000198
 8000f34:	40020000 	.word	0x40020000

08000f38 <_Z15hammingDistanceii>:

// Function to calculate hamming distance (the amount of bits difference between two numbers)
inline int hammingDistance(int n1, int n2) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    int x = n1 ^ n2;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4053      	eors	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
    int setBits = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]

    while (x > 0) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd09      	ble.n	8000f68 <_Z15hammingDistanceii+0x30>
        setBits += x & 1;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
        x >>= 1;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	105b      	asrs	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
    while (x > 0) {
 8000f66:	e7f2      	b.n	8000f4e <_Z15hammingDistanceii+0x16>
    }
    return setBits;
 8000f68:	68bb      	ldr	r3, [r7, #8]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <_ZN16MemoryControllerC1EP12GPIO_TypeDeft>:

MemoryController::MemoryController(GPIO_TypeDef *CE_GPIO_Port, uint16_t CE_Pin) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
	_CE_GPIO_Port = CE_GPIO_Port;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	601a      	str	r2, [r3, #0]
	_CE_Pin = CE_Pin;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	809a      	strh	r2, [r3, #4]
	prev_state = WRITING;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2201      	movs	r2, #1
 8000f92:	719a      	strb	r2, [r3, #6]
	en_state = DISABLED;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2201      	movs	r2, #1
 8000f98:	71da      	strb	r2, [r3, #7]
}
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft>:

void MemoryController::set_CE(GPIO_TypeDef *CE_GPIO_Port, uint16_t CE_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_CE_GPIO_Port, M1_CE_Pin|M2_CE_Pin|M3_CE_Pin, GPIO_PIN_SET); // Disable All Memory
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <_ZN16MemoryController6set_CEEP12GPIO_TypeDeft+0x30>)
 8000fbe:	f001 f9f1 	bl	80023a4 <HAL_GPIO_WritePin>

	_CE_GPIO_Port = CE_GPIO_Port;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
	_CE_Pin = CE_Pin;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	809a      	strh	r2, [r3, #4]
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400

08000fdc <_ZN16MemoryController5floodEh>:
void MemoryController::clear() {
	// Clear all 2,097,152 addresses
	flood(0);
}

void MemoryController::flood(uint8_t data) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	// Flood all 2,097,152 addresses with data. At 32MHz this takes 2.2 seconds.

	// Enable Memory
	if (en_state != ENABLED) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	79db      	ldrb	r3, [r3, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <_ZN16MemoryController5floodEh+0x1a>
		enable();
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8e5 	bl	80011c0 <_ZN16MemoryController6enableEv>
	}

	// Set IO to Outputs
	if (prev_state != WRITING) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	799b      	ldrb	r3, [r3, #6]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d004      	beq.n	8001008 <_ZN16MemoryController5floodEh+0x2c>
		Set_IO_Outputs();
 8000ffe:	f7ff ff6d 	bl	8000edc <_Z14Set_IO_Outputsv>
		prev_state = WRITING;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	719a      	strb	r2, [r3, #6]
	}

	// Set 8 bit data
	GPIOA->ODR = (GPIOA->ODR & 0xff00) | data;
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	4925      	ldr	r1, [pc, #148]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 8001014:	4313      	orrs	r3, r2
 8001016:	614b      	str	r3, [r1, #20]

	// Disable Output and Enable Write
	WRITE_EN_GPIO_Port->ODR = (WRITE_EN_GPIO_Port->ODR |= OUT_EN_Pin) &= ~WRITE_EN_Pin; // Set OUT_EN_Pin and reset WRITE_EN_Pin
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 800101e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001022:	6153      	str	r3, [r2, #20]
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <_ZN16MemoryController5floodEh+0xd0>)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 8001030:	6153      	str	r3, [r2, #20]

	// This is just a fast version of the set_addr function that iterates through all 2,097,152 memory addresses
	uint32_t addr = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 8001036:	2300      	movs	r3, #0
 8001038:	74fb      	strb	r3, [r7, #19]
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	d829      	bhi.n	8001094 <_ZN16MemoryController5floodEh+0xb8>
		GPIOB->ODR = (GPIOB->ODR & 0b11111111111111111111111111001000) | (((addr & 0b1110000000000000000) >> 16) | ((addr & 0b110000000000000000000) >> 15));
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <_ZN16MemoryController5floodEh+0xd4>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f023 0237 	bic.w	r2, r3, #55	; 0x37
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	f003 0107 	and.w	r1, r3, #7
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	0bdb      	lsrs	r3, r3, #15
 8001054:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001058:	430b      	orrs	r3, r1
 800105a:	4915      	ldr	r1, [pc, #84]	; (80010b0 <_ZN16MemoryController5floodEh+0xd4>)
 800105c:	4313      	orrs	r3, r2
 800105e:	614b      	str	r3, [r1, #20]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d20f      	bcs.n	800108c <_ZN16MemoryController5floodEh+0xb0>
			GPIOC->ODR = (GPIOC->ODR & 0b11111111111111110000000000000000) | (addr & 0b1111111111111111);
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_ZN16MemoryController5floodEh+0xd8>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	b292      	uxth	r2, r2
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <_ZN16MemoryController5floodEh+0xd8>)
 800107a:	4313      	orrs	r3, r2
 800107c:	614b      	str	r3, [r1, #20]
			addr++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e7eb      	b.n	8001064 <_ZN16MemoryController5floodEh+0x88>
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	3301      	adds	r3, #1
 8001090:	74fb      	strb	r3, [r7, #19]
 8001092:	e7d2      	b.n	800103a <_ZN16MemoryController5floodEh+0x5e>
		}
	}

	// Disable Write
	WRITE_EN_GPIO_Port->ODR |= WRITE_EN_Pin;	// Set WRITE_EN_Pin
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <_ZN16MemoryController5floodEh+0xcc>)
 800109a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109e:	6153      	str	r3, [r2, #20]
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020014 	.word	0x40020014
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020800 	.word	0x40020800

080010b8 <_ZN16MemoryController9check_forEh>:

uint32_t MemoryController::check_for(uint8_t data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	// Check entire chip for bytes that are not equal to data. Returns number of incorrect bits. At 32MHz this takes 3.5 seconds.
	// Enable Memory
	if (en_state != ENABLED) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	79db      	ldrb	r3, [r3, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <_ZN16MemoryController9check_forEh+0x1a>
		enable();
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f877 	bl	80011c0 <_ZN16MemoryController6enableEv>
	}

	// Disable Write and Enable Output
	WRITE_EN_GPIO_Port->ODR = (WRITE_EN_GPIO_Port->ODR |= WRITE_EN_Pin) &= ~OUT_EN_Pin;	// Set WRITE_EN_Pin and reset OUT_EN_Pin
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <_ZN16MemoryController9check_forEh+0xfc>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 80010ea:	6153      	str	r3, [r2, #20]

	// Set IO to Inputs
	if (prev_state != READING) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	799b      	ldrb	r3, [r3, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <_ZN16MemoryController9check_forEh+0x46>
		Set_IO_Inputs();
 80010f4:	f7ff ff0a 	bl	8000f0c <_Z13Set_IO_Inputsv>
		prev_state = READING;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	719a      	strb	r2, [r3, #6]
	}
	uint32_t wrong_count = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

	// Read every address and count bit differences [3.5s when all correct, 17s when all incorrect]
	uint32_t addr = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b1f      	cmp	r3, #31
 800110e:	d841      	bhi.n	8001194 <_ZN16MemoryController9check_forEh+0xdc>
		GPIOB->ODR = (GPIOB->ODR & 0b11111111111111111111111111001000) | (((addr & 0b1110000000000000000) >> 16) | ((addr & 0b110000000000000000000) >> 15));
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <_ZN16MemoryController9check_forEh+0x100>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f023 0237 	bic.w	r2, r3, #55	; 0x37
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	f003 0107 	and.w	r1, r3, #7
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	0bdb      	lsrs	r3, r3, #15
 8001124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001128:	430b      	orrs	r3, r1
 800112a:	4923      	ldr	r1, [pc, #140]	; (80011b8 <_ZN16MemoryController9check_forEh+0x100>)
 800112c:	4313      	orrs	r3, r2
 800112e:	614b      	str	r3, [r1, #20]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113a:	d227      	bcs.n	800118c <_ZN16MemoryController9check_forEh+0xd4>
			GPIOC->ODR = (GPIOC->ODR & 0b11111111111111110000000000000000) | (addr & 0b1111111111111111);
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZN16MemoryController9check_forEh+0x104>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	0c1b      	lsrs	r3, r3, #16
 8001142:	041b      	lsls	r3, r3, #16
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	b292      	uxth	r2, r2
 8001148:	491c      	ldr	r1, [pc, #112]	; (80011bc <_ZN16MemoryController9check_forEh+0x104>)
 800114a:	4313      	orrs	r3, r2
 800114c:	614b      	str	r3, [r1, #20]
			// Read IO
			if ((GPIOA->IDR & 0xff) != data) {
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	429a      	cmp	r2, r3
 8001158:	bf14      	ite	ne
 800115a:	2301      	movne	r3, #1
 800115c:	2300      	moveq	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00c      	beq.n	800117e <_ZN16MemoryController9check_forEh+0xc6>
				wrong_count += hammingDistance(GPIOA->IDR & 0xff, data);
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fee2 	bl	8000f38 <_Z15hammingDistanceii>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4413      	add	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
//				char print_buf[10+2];
//				sprintf(print_buf, "E: %07ld\n", addr);
//				HAL_UART_Transmit(&huart1, (uint8_t*) print_buf, sizeof(print_buf), 10);
			}
			addr++;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
		for (uint32_t addr_fine = 0; addr_fine < 65536; addr_fine++) {
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	e7d3      	b.n	8001134 <_ZN16MemoryController9check_forEh+0x7c>
	for (uint8_t addr_coarse = 0; addr_coarse < 32; addr_coarse++) {
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e7ba      	b.n	800110a <_ZN16MemoryController9check_forEh+0x52>
		}
	}

	// Disable Output
	OUT_EN_GPIO_Port->ODR = OUT_EN_GPIO_Port->ODR |= OUT_EN_Pin;	// Set OUT_EN_Pin
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 800119a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119e:	6153      	str	r3, [r2, #20]
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <_ZN16MemoryController9check_forEh+0xf8>)
 80011a2:	6153      	str	r3, [r2, #20]

	return wrong_count;
 80011a4:	697b      	ldr	r3, [r7, #20]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020014 	.word	0x40020014
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800

080011c0 <_ZN16MemoryController6enableEv>:

void MemoryController::enable() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	// Enable Memory 1
	HAL_GPIO_WritePin(_CE_GPIO_Port, _CE_Pin, GPIO_PIN_RESET);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	f001 f8e6 	bl	80023a4 <HAL_GPIO_WritePin>
	en_state = ENABLED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	71da      	strb	r2, [r3, #7]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZN16MemoryController7disableEv>:

void MemoryController::disable() {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	// Disable Memory 1
	HAL_GPIO_WritePin(_CE_GPIO_Port, _CE_Pin, GPIO_PIN_SET);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	f001 f8d3 	bl	80023a4 <HAL_GPIO_WritePin>
	en_state = DISABLED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	71da      	strb	r2, [r3, #7]
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_MspInit+0x58>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_MspInit+0x58>)
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	6253      	str	r3, [r2, #36]	; 0x24
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_MspInit+0x58>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_MspInit+0x58>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_MspInit+0x58>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_MspInit+0x58>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_MspInit+0x58>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_MspInit+0x58>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6253      	str	r3, [r2, #36]	; 0x24
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_MspInit+0x58>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x74>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d124      	bne.n	80012d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 8001290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB13     ------> ADC_IN19
    PB14     ------> ADC_IN20
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_ADC_MspInit+0x7c>)
 80012d0:	f000 fe08 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400

080012e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_I2C_MspInit+0x9c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d137      	bne.n	800137a <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001332:	2304      	movs	r3, #4
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <HAL_I2C_MspInit+0xa4>)
 800133e:	f000 fdd1 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6253      	str	r3, [r2, #36]	; 0x24
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_I2C_MspInit+0xa0>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201f      	movs	r0, #31
 8001360:	f000 fd2d 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001364:	201f      	movs	r0, #31
 8001366:	f000 fd46 	bl	8001df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2020      	movs	r0, #32
 8001370:	f000 fd25 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001374:	2020      	movs	r0, #32
 8001376:	f000 fd3e 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005400 	.word	0x40005400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_I2C_MspDeInit+0x44>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d113      	bne.n	80013ca <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_I2C_MspDeInit+0x48>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <HAL_I2C_MspDeInit+0x48>)
 80013a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013ac:	6253      	str	r3, [r2, #36]	; 0x24

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <HAL_I2C_MspDeInit+0x4c>)
 80013b2:	f000 ff17 	bl	80021e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <HAL_I2C_MspDeInit+0x4c>)
 80013ba:	f000 ff13 	bl	80021e4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80013be:	201f      	movs	r0, #31
 80013c0:	f000 fd27 	bl	8001e12 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80013c4:	2020      	movs	r0, #32
 80013c6:	f000 fd24 	bl	8001e12 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_RTC_MspInit+0x30>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10a      	bne.n	8001408 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_RTC_MspInit+0x34>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fcde 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001402:	2003      	movs	r0, #3
 8001404:	f000 fcf7 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40002800 	.word	0x40002800
 8001414:	424706d8 	.word	0x424706d8

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_TIM_Base_MspInit+0x34>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10b      	bne.n	8001442 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_TIM_Base_MspInit+0x38>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_TIM_Base_MspInit+0x38>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6213      	str	r3, [r2, #32]
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_TIM_Base_MspInit+0x38>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x7c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d128      	bne.n	80014c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_UART_MspInit+0x80>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <HAL_UART_MspInit+0x80>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_UART_MspInit+0x80>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_UART_MspInit+0x80>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_UART_MspInit+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_UART_MspInit+0x80>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_UART_MspInit+0x84>)
 80014c4:	f000 fd0e 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f000 f89f 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <RTC_WKUP_IRQHandler+0x10>)
 8001532:	f004 f81f 	bl	8005574 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000f0 	.word	0x200000f0

08001540 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <I2C1_EV_IRQHandler+0x10>)
 8001546:	f001 f9e5 	bl	8002914 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000009c 	.word	0x2000009c

08001554 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <I2C1_ER_IRQHandler+0x10>)
 800155a:	f001 fb4c 	bl	8002bf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000009c 	.word	0x2000009c

08001568 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159a:	f7ff ffe5 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f004 fb93 	bl	8005cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff f883 	bl	80006ac <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015b0:	08005d6c 	.word	0x08005d6c
  ldr r2, =_sbss
 80015b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015b8:	200001b0 	.word	0x200001b0

080015bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_IRQHandler>

080015be <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 fbed 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f80e 	bl	80015f0 <HAL_InitTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	e001      	b.n	80015e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e0:	f7ff fe14 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_InitTick+0x68>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d022      	beq.n	800164a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_InitTick+0x6c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_InitTick+0x68>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001610:	fbb1 f3f3 	udiv	r3, r1, r3
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fc08 	bl	8001e2e <HAL_SYSTICK_Config>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10f      	bne.n	8001644 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	d809      	bhi.n	800163e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162a:	2200      	movs	r2, #0
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	f04f 30ff 	mov.w	r0, #4294967295
 8001632:	f000 fbc4 	bl	8001dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_InitTick+0x70>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e007      	b.n	800164e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e004      	b.n	800164e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000008 	.word	0x20000008
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x1c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x20>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4413      	add	r3, r2
 8001672:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x1c>)
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200001ac 	.word	0x200001ac
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_GetTick+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200001ac 	.word	0x200001ac

0800169c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e127      	b.n	800190c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <HAL_ADC_Init+0x278>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a8d      	ldr	r2, [pc, #564]	; (8001914 <HAL_ADC_Init+0x278>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_ADC_Init+0x278>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fdb9 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80ff 	bne.w	8001902 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800170c:	f023 0302 	bic.w	r3, r3, #2
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_ADC_Init+0x27c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	497c      	ldr	r1, [pc, #496]	; (8001918 <HAL_ADC_Init+0x27c>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001732:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173a:	4619      	mov	r1, r3
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001756:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800175c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	2302      	movs	r3, #2
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800177e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	4313      	orrs	r3, r2
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b10      	cmp	r3, #16
 800178c:	d007      	beq.n	800179e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001796:	4313      	orrs	r3, r2
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	4313      	orrs	r3, r2
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	2b40      	cmp	r3, #64	; 0x40
 80017aa:	d04f      	beq.n	800184c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	4313      	orrs	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6912      	ldr	r2, [r2, #16]
 80017c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80017c8:	d003      	beq.n	80017d2 <HAL_ADC_Init+0x136>
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6912      	ldr	r2, [r2, #16]
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_ADC_Init+0x13c>
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0x13e>
 80017d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80017da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017de:	4313      	orrs	r3, r2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001800:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	617a      	str	r2, [r7, #20]
  return result;
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4093      	lsls	r3, r2
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181a:	4313      	orrs	r3, r2
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
 800181e:	e00b      	b.n	8001838 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	f043 0220 	orr.w	r2, r3, #32
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_ADC_Init+0x280>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001848:	430b      	orrs	r3, r1
 800184a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_ADC_Init+0x284>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800185c:	430b      	orrs	r3, r1
 800185e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001868:	d003      	beq.n	8001872 <HAL_ADC_Init+0x1d6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d119      	bne.n	80018a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	3b01      	subs	r3, #1
 8001882:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001886:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	fa92 f2a2 	rbit	r2, r2
 800188e:	60fa      	str	r2, [r7, #12]
  return result;
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	fa03 f202 	lsl.w	r2, r3, r2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
 80018a4:	e007      	b.n	80018b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_ADC_Init+0x288>)
 80018be:	4013      	ands	r3, r2
 80018c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10b      	bne.n	80018de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f023 0303 	bic.w	r3, r3, #3
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
 80018dc:	e014      	b.n	8001908 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f023 0312 	bic.w	r3, r3, #18
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001900:	e002      	b.n	8001908 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800190c:	4618      	mov	r0, r3
 800190e:	3738      	adds	r7, #56	; 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40012700 	.word	0x40012700
 800191c:	fcfc16ff 	.word	0xfcfc16ff
 8001920:	c0fff18d 	.word	0xc0fff18d
 8001924:	bf80fffe 	.word	0xbf80fffe

08001928 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e134      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x28a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b06      	cmp	r3, #6
 8001956:	d81c      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b05      	subs	r3, #5
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
 8001990:	e07e      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d81c      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b23      	subs	r3, #35	; 0x23
 80019ac:	221f      	movs	r2, #31
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	; 0x23
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d2:	e05d      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d81c      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	; 0x41
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b41      	subs	r3, #65	; 0x41
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
 8001a14:	e03c      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b18      	cmp	r3, #24
 8001a1c:	d81c      	bhi.n	8001a58 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b5f      	subs	r3, #95	; 0x5f
 8001a30:	221f      	movs	r2, #31
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4019      	ands	r1, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b5f      	subs	r3, #95	; 0x5f
 8001a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
 8001a56:	e01b      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b7d      	subs	r3, #125	; 0x7d
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4019      	ands	r1, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b7d      	subs	r3, #125	; 0x7d
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d81a      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6959      	ldr	r1, [r3, #20]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4019      	ands	r1, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6898      	ldr	r0, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	e042      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b13      	cmp	r3, #19
 8001ad4:	d81c      	bhi.n	8001b10 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6919      	ldr	r1, [r3, #16]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	2207      	movs	r2, #7
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4019      	ands	r1, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6898      	ldr	r0, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	e021      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b1a      	cmp	r3, #26
 8001b16:	d81c      	bhi.n	8001b52 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68d9      	ldr	r1, [r3, #12]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	3b3c      	subs	r3, #60	; 0x3c
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4019      	ands	r1, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6898      	ldr	r0, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	3b3c      	subs	r3, #60	; 0x3c
 8001b44:	fa00 f203 	lsl.w	r2, r0, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	e000      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001b52:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d003      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d121      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_ADC_ConfigChannel+0x294>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_ADC_ConfigChannel+0x294>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_ADC_ConfigChannel+0x294>)
 8001b76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b7a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_ADC_ConfigChannel+0x298>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40012700 	.word	0x40012700
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db12      	blt.n	8001c9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <__NVIC_DisableIRQ+0x44>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	3320      	adds	r3, #32
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c90:	f3bf 8f4f 	dsb	sy
}
 8001c94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c96:	f3bf 8f6f 	isb	sy
}
 8001c9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff90 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff09 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff1e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff90 	bl	8001d00 <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5f 	bl	8001cac <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff11 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff1f 	bl	8001c64 <__NVIC_DisableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff94 	bl	8001d64 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d005      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2204      	movs	r2, #4
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e029      	b.n	8001ebe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 020e 	bic.w	r2, r2, #14
 8001e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 021c 	and.w	r2, r3, #28
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
    }
  }
  return status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed6:	b2db      	uxtb	r3, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001efa:	e154      	b.n	80021a6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8146 	beq.w	80021a0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d005      	beq.n	8001f2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d130      	bne.n	8001f8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f62:	2201      	movs	r2, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	f003 0201 	and.w	r2, r3, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d017      	beq.n	8001fca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d123      	bne.n	800201e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	6939      	ldr	r1, [r7, #16]
 800201a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80a0 	beq.w	80021a0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002060:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x2e0>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a57      	ldr	r2, [pc, #348]	; (80021c4 <HAL_GPIO_Init+0x2e0>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HAL_GPIO_Init+0x2e0>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002078:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_GPIO_Init+0x2e4>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <HAL_GPIO_Init+0x2e8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d019      	beq.n	80020d8 <HAL_GPIO_Init+0x1f4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_GPIO_Init+0x2ec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_GPIO_Init+0x1f0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a49      	ldr	r2, [pc, #292]	; (80021d4 <HAL_GPIO_Init+0x2f0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_GPIO_Init+0x1ec>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_GPIO_Init+0x2f4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <HAL_GPIO_Init+0x1e8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_GPIO_Init+0x2f8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e008      	b.n	80020da <HAL_GPIO_Init+0x1f6>
 80020c8:	2305      	movs	r3, #5
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x1f6>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e004      	b.n	80020da <HAL_GPIO_Init+0x1f6>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x1f6>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_Init+0x1f6>
 80020d8:	2300      	movs	r3, #0
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ea:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_GPIO_Init+0x2e4>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800211c:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_GPIO_Init+0x2fc>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f aea3 	bne.w	8001efc <HAL_GPIO_Init+0x18>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80021fa:	e0b8      	b.n	800236e <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80021fc:	2201      	movs	r2, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ab 	beq.w	8002368 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8002212:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <HAL_GPIO_DeInit+0x1a4>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_GPIO_DeInit+0x1a8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d019      	beq.n	8002270 <HAL_GPIO_DeInit+0x8c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a54      	ldr	r2, [pc, #336]	; (8002390 <HAL_GPIO_DeInit+0x1ac>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_GPIO_DeInit+0x88>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a53      	ldr	r2, [pc, #332]	; (8002394 <HAL_GPIO_DeInit+0x1b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00d      	beq.n	8002268 <HAL_GPIO_DeInit+0x84>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_GPIO_DeInit+0x1b4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_DeInit+0x80>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a51      	ldr	r2, [pc, #324]	; (800239c <HAL_GPIO_DeInit+0x1b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_GPIO_DeInit+0x7c>
 800225c:	2304      	movs	r3, #4
 800225e:	e008      	b.n	8002272 <HAL_GPIO_DeInit+0x8e>
 8002260:	2305      	movs	r3, #5
 8002262:	e006      	b.n	8002272 <HAL_GPIO_DeInit+0x8e>
 8002264:	2303      	movs	r3, #3
 8002266:	e004      	b.n	8002272 <HAL_GPIO_DeInit+0x8e>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_DeInit+0x8e>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_DeInit+0x8e>
 8002270:	2300      	movs	r3, #0
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	429a      	cmp	r2, r3
 8002280:	d132      	bne.n	80022e8 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	4945      	ldr	r1, [pc, #276]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 800228c:	4013      	ands	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	4941      	ldr	r1, [pc, #260]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 800229a:	4013      	ands	r3, r2
 800229c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	493e      	ldr	r1, [pc, #248]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	493a      	ldr	r1, [pc, #232]	; (80023a0 <HAL_GPIO_DeInit+0x1bc>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80022ca:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <HAL_GPIO_DeInit+0x1a4>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43da      	mvns	r2, r3
 80022da:	482b      	ldr	r0, [pc, #172]	; (8002388 <HAL_GPIO_DeInit+0x1a4>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	400a      	ands	r2, r1
 80022e2:	3302      	adds	r3, #2
 80022e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2103      	movs	r1, #3
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	08d2      	lsrs	r2, r2, #3
 800231e:	4019      	ands	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2103      	movs	r1, #3
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	2101      	movs	r1, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2103      	movs	r1, #3
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f af40 	bne.w	80021fc <HAL_GPIO_DeInit+0x18>
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40010000 	.word	0x40010000
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010400 	.word	0x40010400

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e12b      	b.n	800263e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe ff74 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002438:	f002 fc46 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <HAL_I2C_Init+0x274>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d807      	bhi.n	8002458 <HAL_I2C_Init+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_I2C_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e006      	b.n	8002466 <HAL_I2C_Init+0x92>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a7d      	ldr	r2, [pc, #500]	; (8002650 <HAL_I2C_Init+0x27c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0e7      	b.n	800263e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a78      	ldr	r2, [pc, #480]	; (8002654 <HAL_I2C_Init+0x280>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_I2C_Init+0x274>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_I2C_Init+0xd4>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e009      	b.n	80024bc <HAL_I2C_Init+0xe8>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	4a69      	ldr	r2, [pc, #420]	; (8002658 <HAL_I2C_Init+0x284>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	3301      	adds	r3, #1
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	495c      	ldr	r1, [pc, #368]	; (8002648 <HAL_I2C_Init+0x274>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d819      	bhi.n	8002510 <HAL_I2C_Init+0x13c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e59      	subs	r1, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024f0:	400b      	ands	r3, r1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_I2C_Init+0x138>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e59      	subs	r1, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fbb1 f3f3 	udiv	r3, r1, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	e051      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800250c:	2304      	movs	r3, #4
 800250e:	e04f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_I2C_Init+0x168>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e012      	b.n	8002562 <HAL_I2C_Init+0x18e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	0099      	lsls	r1, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x196>
 8002566:	2301      	movs	r3, #1
 8002568:	e022      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10e      	bne.n	8002590 <HAL_I2C_Init+0x1bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e58      	subs	r0, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	fbb0 f3f3 	udiv	r3, r0, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	e00f      	b.n	80025b0 <HAL_I2C_Init+0x1dc>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	0099      	lsls	r1, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6911      	ldr	r1, [r2, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	000186a0 	.word	0x000186a0
 800264c:	001e847f 	.word	0x001e847f
 8002650:	003d08ff 	.word	0x003d08ff
 8002654:	431bde83 	.word	0x431bde83
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e021      	b.n	80026b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2224      	movs	r2, #36	; 0x24
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fe82 	bl	8001390 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d103      	bne.n	80026d8 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  }
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026fe:	2b28      	cmp	r3, #40	; 0x28
 8002700:	d15b      	bne.n	80027ba <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e054      	b.n	80027bc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800271c:	2302      	movs	r3, #2
 800271e:	e04d      	b.n	80027bc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d007      	beq.n	8002746 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002754:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2229      	movs	r2, #41	; 0x29
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80027b4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
  }
}
 80027bc:	4618      	mov	r0, r3
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027e2:	2b28      	cmp	r3, #40	; 0x28
 80027e4:	d15b      	bne.n	800289e <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e054      	b.n	80028a0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002800:	2302      	movs	r3, #2
 8002802:	e04d      	b.n	80028a0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d007      	beq.n	800282a <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002838:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	222a      	movs	r2, #42	; 0x2a
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002898:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d124      	bne.n	8002908 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2228      	movs	r2, #40	; 0x28
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f2:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002902:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002934:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d003      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x38>
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	f040 80c1 	bne.w	8002ace <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x6e>
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800296c:	d003      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0x62>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002974:	d101      	bne.n	800297a <HAL_I2C_EV_IRQHandler+0x66>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_I2C_EV_IRQHandler+0x68>
 800297a:	2300      	movs	r3, #0
 800297c:	2b01      	cmp	r3, #1
 800297e:	f000 8132 	beq.w	8002be6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0x92>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 fc4f 	bl	800423c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fd57 	bl	8003452 <I2C_Master_SB>
 80029a4:	e092      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	0a5b      	lsrs	r3, r3, #9
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fdcc 	bl	800355c <I2C_Master_ADD10>
 80029c4:	e082      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	0a5b      	lsrs	r3, r3, #9
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fde5 	bl	80035ae <I2C_Master_ADDR>
 80029e4:	e072      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d03b      	beq.n	8002a6a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a00:	f000 80f3 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	09db      	lsrs	r3, r3, #7
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00f      	beq.n	8002a30 <HAL_I2C_EV_IRQHandler+0x11c>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_I2C_EV_IRQHandler+0x11c>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f9c3 	bl	8002db4 <I2C_MasterTransmit_TXE>
 8002a2e:	e04d      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80d6 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	0a5b      	lsrs	r3, r3, #9
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80cf 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a4c:	7bbb      	ldrb	r3, [r7, #14]
 8002a4e:	2b21      	cmp	r3, #33	; 0x21
 8002a50:	d103      	bne.n	8002a5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa4a 	bl	8002eec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a58:	e0c7      	b.n	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	f040 80c4 	bne.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fab8 	bl	8002fd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a68:	e0bf      	b.n	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a78:	f000 80b7 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x194>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x194>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb31 	bl	8003108 <I2C_MasterReceive_RXNE>
 8002aa6:	e011      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 809a 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	0a5b      	lsrs	r3, r3, #9
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8093 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fbda 	bl	800327e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aca:	e08e      	b.n	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
 8002acc:	e08d      	b.n	8002bea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e007      	b.n	8002af0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x20e>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	0a5b      	lsrs	r3, r3, #9
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 ff93 	bl	8003a46 <I2C_Slave_ADDR>
 8002b20:	e066      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x22e>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 ffce 	bl	8003adc <I2C_Slave_STOPF>
 8002b40:	e056      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2b21      	cmp	r3, #33	; 0x21
 8002b46:	d002      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x23a>
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	2b29      	cmp	r3, #41	; 0x29
 8002b4c:	d125      	bne.n	8002b9a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	09db      	lsrs	r3, r3, #7
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00f      	beq.n	8002b7a <HAL_I2C_EV_IRQHandler+0x266>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	0a9b      	lsrs	r3, r3, #10
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_I2C_EV_IRQHandler+0x266>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 feab 	bl	80038ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b78:	e039      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d033      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x2da>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	0a5b      	lsrs	r3, r3, #9
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02d      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fed8 	bl	8003948 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b98:	e029      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00f      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	0a9b      	lsrs	r3, r3, #10
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fee2 	bl	8003988 <I2C_SlaveReceive_RXNE>
 8002bc4:	e014      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 ff10 	bl	8003a04 <I2C_SlaveReceive_BTF>
 8002be4:	e004      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08a      	sub	sp, #40	; 0x28
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0x4e>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	0a5b      	lsrs	r3, r3, #9
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <HAL_I2C_ER_IRQHandler+0x78>
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	0a9b      	lsrs	r3, r3, #10
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03f      	beq.n	8002cfa <HAL_I2C_ER_IRQHandler+0x104>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d039      	beq.n	8002cfa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c86:	7efb      	ldrb	r3, [r7, #27]
 8002c88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ca0:	7ebb      	ldrb	r3, [r7, #26]
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d112      	bne.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd6>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10f      	bne.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd6>
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b21      	cmp	r3, #33	; 0x21
 8002cb0:	d008      	beq.n	8002cc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b29      	cmp	r3, #41	; 0x29
 8002cb6:	d005      	beq.n	8002cc4 <HAL_I2C_ER_IRQHandler+0xce>
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b28      	cmp	r3, #40	; 0x28
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b21      	cmp	r3, #33	; 0x21
 8002cc2:	d103      	bne.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f001 f839 	bl	8003d3c <I2C_Slave_AF>
 8002cca:	e016      	b.n	8002cfa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cde:	7efb      	ldrb	r3, [r7, #27]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d002      	beq.n	8002cea <HAL_I2C_ER_IRQHandler+0xf4>
 8002ce4:	7efb      	ldrb	r3, [r7, #27]
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	0adb      	lsrs	r3, r3, #11
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <HAL_I2C_ER_IRQHandler+0x12e>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002d22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f001 f874 	bl	8003e24 <I2C_ITError>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d150      	bne.n	8002e7c <I2C_MasterTransmit_TXE+0xc8>
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b21      	cmp	r3, #33	; 0x21
 8002dde:	d14d      	bne.n	8002e7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d01d      	beq.n	8002e22 <I2C_MasterTransmit_TXE+0x6e>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d01a      	beq.n	8002e22 <I2C_MasterTransmit_TXE+0x6e>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df2:	d016      	beq.n	8002e22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2211      	movs	r2, #17
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ff92 	bl	8002d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e20:	e060      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d107      	bne.n	8002e6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff7f 	bl	8002d68 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e6a:	e03b      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff65 	bl	8002d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e7a:	e033      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b21      	cmp	r3, #33	; 0x21
 8002e80:	d005      	beq.n	8002e8e <I2C_MasterTransmit_TXE+0xda>
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d12d      	bne.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b22      	cmp	r3, #34	; 0x22
 8002e8c:	d12a      	bne.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ea8:	e01c      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d103      	bne.n	8002ebe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f88e 	bl	8002fd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ebc:	e012      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ee2:	e7ff      	b.n	8002ee4 <I2C_MasterTransmit_TXE+0x130>
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b21      	cmp	r3, #33	; 0x21
 8002f04:	d164      	bne.n	8002fd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f34:	e04c      	b.n	8002fd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d01d      	beq.n	8002f78 <I2C_MasterTransmit_BTF+0x8c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d01a      	beq.n	8002f78 <I2C_MasterTransmit_BTF+0x8c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f48:	d016      	beq.n	8002f78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2211      	movs	r2, #17
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fee7 	bl	8002d44 <HAL_I2C_MasterTxCpltCallback>
}
 8002f76:	e02b      	b.n	8002fd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d107      	bne.n	8002fc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fed4 	bl	8002d68 <HAL_I2C_MemTxCpltCallback>
}
 8002fc0:	e006      	b.n	8002fd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff feba 	bl	8002d44 <HAL_I2C_MasterTxCpltCallback>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11d      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10b      	bne.n	8003010 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	1c9a      	adds	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800300e:	e077      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	b29b      	uxth	r3, r3
 8003016:	121b      	asrs	r3, r3, #8
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	651a      	str	r2, [r3, #80]	; 0x50
}
 800302a:	e069      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10b      	bne.n	800304c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	b2da      	uxtb	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	651a      	str	r2, [r3, #80]	; 0x50
}
 800304a:	e059      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	2b02      	cmp	r3, #2
 8003052:	d152      	bne.n	80030fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b22      	cmp	r3, #34	; 0x22
 8003058:	d10d      	bne.n	8003076 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003068:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003074:	e044      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b21      	cmp	r3, #33	; 0x21
 8003084:	d112      	bne.n	80030ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030aa:	e029      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d124      	bne.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d121      	bne.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fe38 	bl	8002d68 <HAL_I2C_MemTxCpltCallback>
}
 80030f8:	e002      	b.n	8003100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fadd 	bl	80026ba <I2C_Flush_DR>
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b22      	cmp	r3, #34	; 0x22
 800311a:	f040 80ac 	bne.w	8003276 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d921      	bls.n	8003170 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b03      	cmp	r3, #3
 800315a:	f040 808c 	bne.w	8003276 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800316e:	e082      	b.n	8003276 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b02      	cmp	r3, #2
 8003176:	d075      	beq.n	8003264 <I2C_MasterReceive_RXNE+0x15c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d002      	beq.n	8003184 <I2C_MasterReceive_RXNE+0x7c>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d16f      	bne.n	8003264 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 f827 	bl	80041d8 <I2C_WaitOnSTOPRequestThroughIT>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d142      	bne.n	8003216 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d10a      	bne.n	8003200 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fdbe 	bl	8002d7a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031fe:	e03a      	b.n	8003276 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2212      	movs	r2, #18
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fda1 	bl	8002d56 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003214:	e02f      	b.n	8003276 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003224:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd f9d5 	bl	800060c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003262:	e008      	b.n	8003276 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	605a      	str	r2, [r3, #4]
}
 8003274:	e7ff      	b.n	8003276 <I2C_MasterReceive_RXNE+0x16e>
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b04      	cmp	r3, #4
 8003294:	d11b      	bne.n	80032ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032cc:	e0bd      	b.n	800344a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d129      	bne.n	800332c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00a      	beq.n	8003304 <I2C_MasterReceive_BTF+0x86>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d007      	beq.n	8003304 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003302:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332a:	e08e      	b.n	800344a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d176      	bne.n	8003424 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d002      	beq.n	8003342 <I2C_MasterReceive_BTF+0xc4>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d108      	bne.n	8003354 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e019      	b.n	8003388 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d002      	beq.n	8003360 <I2C_MasterReceive_BTF+0xe2>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d108      	bne.n	8003372 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e00a      	b.n	8003388 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d007      	beq.n	8003388 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003386:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10a      	bne.n	800340e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fcb7 	bl	8002d7a <HAL_I2C_MemRxCpltCallback>
}
 800340c:	e01d      	b.n	800344a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2212      	movs	r2, #18
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fc9a 	bl	8002d56 <HAL_I2C_MasterRxCpltCallback>
}
 8003422:	e012      	b.n	800344a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d117      	bne.n	8003496 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800347e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003480:	e067      	b.n	8003552 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]
}
 8003494:	e05d      	b.n	8003552 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349e:	d133      	bne.n	8003508 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b21      	cmp	r3, #33	; 0x21
 80034aa:	d109      	bne.n	80034c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e008      	b.n	80034d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <I2C_Master_SB+0x92>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d032      	beq.n	8003552 <I2C_Master_SB+0x100>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02d      	beq.n	8003552 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	605a      	str	r2, [r3, #4]
}
 8003506:	e024      	b.n	8003552 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	b29b      	uxth	r3, r3
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]
}
 800352c:	e011      	b.n	8003552 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10d      	bne.n	8003552 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	b29b      	uxth	r3, r3
 800353c:	11db      	asrs	r3, r3, #7
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f003 0306 	and.w	r3, r3, #6
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f063 030e 	orn	r3, r3, #14
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	b2da      	uxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <I2C_Master_ADD10+0x26>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <I2C_Master_ADD10+0x48>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b091      	sub	sp, #68	; 0x44
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b22      	cmp	r3, #34	; 0x22
 80035d6:	f040 8169 	bne.w	80038ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <I2C_Master_ADDR+0x54>
 80035e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d10b      	bne.n	8003602 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	e160      	b.n	80038c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <I2C_Master_ADDR+0x98>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003612:	d118      	bne.n	8003646 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	651a      	str	r2, [r3, #80]	; 0x50
 8003644:	e13e      	b.n	80038c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d113      	bne.n	8003678 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003650:	2300      	movs	r3, #0
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e115      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	f040 808a 	bne.w	8003798 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800368a:	d137      	bne.n	80036fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036aa:	d113      	bne.n	80036d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	e0e7      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d4:	2300      	movs	r3, #0
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e0d3      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d02e      	beq.n	8003760 <I2C_Master_ADDR+0x1b2>
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b20      	cmp	r3, #32
 8003706:	d02b      	beq.n	8003760 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	2b12      	cmp	r3, #18
 800370c:	d102      	bne.n	8003714 <I2C_Master_ADDR+0x166>
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2b01      	cmp	r3, #1
 8003712:	d125      	bne.n	8003760 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b04      	cmp	r3, #4
 8003718:	d00e      	beq.n	8003738 <I2C_Master_ADDR+0x18a>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b02      	cmp	r3, #2
 800371e:	d00b      	beq.n	8003738 <I2C_Master_ADDR+0x18a>
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	2b10      	cmp	r3, #16
 8003724:	d008      	beq.n	8003738 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e007      	b.n	8003748 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	e0a1      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e085      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d14d      	bne.n	800383e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d016      	beq.n	80037d6 <I2C_Master_ADDR+0x228>
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d013      	beq.n	80037d6 <I2C_Master_ADDR+0x228>
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d010      	beq.n	80037d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f4:	d117      	bne.n	8003826 <I2C_Master_ADDR+0x278>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037fc:	d00b      	beq.n	8003816 <I2C_Master_ADDR+0x268>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	2b01      	cmp	r3, #1
 8003802:	d008      	beq.n	8003816 <I2C_Master_ADDR+0x268>
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	2b08      	cmp	r3, #8
 8003808:	d005      	beq.n	8003816 <I2C_Master_ADDR+0x268>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	2b10      	cmp	r3, #16
 800380e:	d002      	beq.n	8003816 <I2C_Master_ADDR+0x268>
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	2b20      	cmp	r3, #32
 8003814:	d107      	bne.n	8003826 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003824:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	e032      	b.n	80038a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800384c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385c:	d117      	bne.n	800388e <I2C_Master_ADDR+0x2e0>
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003864:	d00b      	beq.n	800387e <I2C_Master_ADDR+0x2d0>
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	2b01      	cmp	r3, #1
 800386a:	d008      	beq.n	800387e <I2C_Master_ADDR+0x2d0>
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2b08      	cmp	r3, #8
 8003870:	d005      	beq.n	800387e <I2C_Master_ADDR+0x2d0>
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b10      	cmp	r3, #16
 8003876:	d002      	beq.n	800387e <I2C_Master_ADDR+0x2d0>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b20      	cmp	r3, #32
 800387c:	d107      	bne.n	800388e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800388c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038aa:	e00b      	b.n	80038c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
}
 80038c2:	e7ff      	b.n	80038c4 <I2C_Master_ADDR+0x316>
 80038c4:	bf00      	nop
 80038c6:	3744      	adds	r7, #68	; 0x44
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02b      	beq.n	8003940 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <I2C_SlaveTransmit_TXE+0x72>
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b29      	cmp	r3, #41	; 0x29
 800391a:	d111      	bne.n	8003940 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2221      	movs	r2, #33	; 0x21
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2228      	movs	r2, #40	; 0x28
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fc fe44 	bl	80005c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d011      	beq.n	800397e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02c      	beq.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d114      	bne.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d111      	bne.n	80039fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2228      	movs	r2, #40	; 0x28
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fc fdb0 	bl	800055c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a60:	2b28      	cmp	r3, #40	; 0x28
 8003a62:	d127      	bne.n	8003ab4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a72:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	09db      	lsrs	r3, r3, #7
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	81bb      	strh	r3, [r7, #12]
 8003a96:	e002      	b.n	8003a9e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003aa6:	89ba      	ldrh	r2, [r7, #12]
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fc fd0f 	bl	80004d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ab2:	e00e      	b.n	8003ad2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003afa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d172      	bne.n	8003c20 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	d002      	beq.n	8003b46 <I2C_Slave_STOPF+0x6a>
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b2a      	cmp	r3, #42	; 0x2a
 8003b44:	d135      	bne.n	8003bb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe f9a2 	bl	8001ec8 <HAL_DMA_GetState>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d049      	beq.n	8003c1e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	4a69      	ldr	r2, [pc, #420]	; (8003d34 <I2C_Slave_STOPF+0x258>)
 8003b90:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe f955 	bl	8001e46 <HAL_DMA_Abort_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d03d      	beq.n	8003c1e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bac:	4610      	mov	r0, r2
 8003bae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bb0:	e035      	b.n	8003c1e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f043 0204 	orr.w	r2, r3, #4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe f96c 	bl	8001ec8 <HAL_DMA_GetState>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d014      	beq.n	8003c20 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	4a4e      	ldr	r2, [pc, #312]	; (8003d34 <I2C_Slave_STOPF+0x258>)
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe f91f 	bl	8001e46 <HAL_DMA_Abort_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
 8003c1c:	e000      	b.n	8003c20 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c1e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03e      	beq.n	8003ca8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d112      	bne.n	8003c5e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d112      	bne.n	8003c92 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8b7 	bl	8003e24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cb6:	e039      	b.n	8003d2c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbc:	d109      	bne.n	8003cd2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2228      	movs	r2, #40	; 0x28
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fc fc45 	bl	800055c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b28      	cmp	r3, #40	; 0x28
 8003cdc:	d111      	bne.n	8003d02 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <I2C_Slave_STOPF+0x25c>)
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc fbdc 	bl	80004b8 <HAL_I2C_ListenCpltCallback>
}
 8003d00:	e014      	b.n	8003d2c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	2b22      	cmp	r3, #34	; 0x22
 8003d08:	d002      	beq.n	8003d10 <I2C_Slave_STOPF+0x234>
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b22      	cmp	r3, #34	; 0x22
 8003d0e:	d10d      	bne.n	8003d2c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc fc18 	bl	800055c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08004089 	.word	0x08004089
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d002      	beq.n	8003d5e <I2C_Slave_AF+0x22>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d129      	bne.n	8003db2 <I2C_Slave_AF+0x76>
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b28      	cmp	r3, #40	; 0x28
 8003d62:	d126      	bne.n	8003db2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a2e      	ldr	r2, [pc, #184]	; (8003e20 <I2C_Slave_AF+0xe4>)
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d78:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d82:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fb84 	bl	80004b8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003db0:	e031      	b.n	8003e16 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b21      	cmp	r3, #33	; 0x21
 8003db6:	d129      	bne.n	8003e0c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <I2C_Slave_AF+0xe4>)
 8003dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2221      	movs	r2, #33	; 0x21
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003de2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe fc5b 	bl	80026ba <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fc fbdf 	bl	80005c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e0a:	e004      	b.n	8003e16 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e14:	615a      	str	r2, [r3, #20]
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	ffff0000 	.word	0xffff0000

08003e24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d002      	beq.n	8003e48 <I2C_ITError+0x24>
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d10a      	bne.n	8003e5e <I2C_ITError+0x3a>
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	d107      	bne.n	8003e5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e64:	2b28      	cmp	r3, #40	; 0x28
 8003e66:	d107      	bne.n	8003e78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2228      	movs	r2, #40	; 0x28
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e76:	e015      	b.n	8003ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e86:	d00a      	beq.n	8003e9e <I2C_ITError+0x7a>
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b60      	cmp	r3, #96	; 0x60
 8003e8c:	d007      	beq.n	8003e9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb2:	d162      	bne.n	8003f7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d020      	beq.n	8003f14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <I2C_ITError+0x25c>)
 8003ed8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd ffb1 	bl	8001e46 <HAL_DMA_Abort_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8089 	beq.w	8003ffe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4798      	blx	r3
 8003f12:	e074      	b.n	8003ffe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	4a59      	ldr	r2, [pc, #356]	; (8004080 <I2C_ITError+0x25c>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd ff90 	bl	8001e46 <HAL_DMA_Abort_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d068      	beq.n	8003ffe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d10b      	bne.n	8003f52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f74:	4610      	mov	r0, r2
 8003f76:	4798      	blx	r3
 8003f78:	e041      	b.n	8003ffe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b60      	cmp	r3, #96	; 0x60
 8003f84:	d125      	bne.n	8003fd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d10b      	bne.n	8003fba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fede 	bl	8002d8c <HAL_I2C_AbortCpltCallback>
 8003fd0:	e015      	b.n	8003ffe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d10b      	bne.n	8003ff8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fc fb07 	bl	800060c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10e      	bne.n	800402c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800403a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d113      	bne.n	8004078 <I2C_ITError+0x254>
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b28      	cmp	r3, #40	; 0x28
 8004054:	d110      	bne.n	8004078 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <I2C_ITError+0x260>)
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc fa20 	bl	80004b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	08004089 	.word	0x08004089
 8004084:	ffff0000 	.word	0xffff0000

08004088 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040a2:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <I2C_DMAAbort+0x148>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	08db      	lsrs	r3, r3, #3
 80040a8:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <I2C_DMAAbort+0x14c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0a1a      	lsrs	r2, r3, #8
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00da      	lsls	r2, r3, #3
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040ce:	e00a      	b.n	80040e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d0ea      	beq.n	80040bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	2200      	movs	r2, #0
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b60      	cmp	r3, #96	; 0x60
 8004156:	d10e      	bne.n	8004176 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2200      	movs	r2, #0
 800416c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7fe fe0c 	bl	8002d8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004174:	e027      	b.n	80041c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800417c:	2b28      	cmp	r3, #40	; 0x28
 800417e:	d117      	bne.n	80041b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2228      	movs	r2, #40	; 0x28
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041ae:	e007      	b.n	80041c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7fc fa23 	bl	800060c <HAL_I2C_ErrorCallback>
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000
 80041d4:	14f8b589 	.word	0x14f8b589

080041d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	4a13      	ldr	r2, [pc, #76]	; (8004238 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	0a1a      	lsrs	r2, r3, #8
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e008      	b.n	8004228 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d0e9      	beq.n	80041fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000
 8004238:	14f8b589 	.word	0x14f8b589

0800423c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800424c:	d103      	bne.n	8004256 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004254:	e007      	b.n	8004266 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800425e:	d102      	bne.n	8004266 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2208      	movs	r2, #8
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e31d      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004282:	4b94      	ldr	r3, [pc, #592]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428c:	4b91      	ldr	r3, [pc, #580]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d07b      	beq.n	800439a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d006      	beq.n	80042b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d10b      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	4b87      	ldr	r3, [pc, #540]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06a      	beq.n	8004398 <HAL_RCC_OscConfig+0x128>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d166      	bne.n	8004398 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e2f7      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x74>
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7e      	ldr	r2, [pc, #504]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e02d      	b.n	8004340 <HAL_RCC_OscConfig+0xd0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x96>
 80042ec:	4b79      	ldr	r3, [pc, #484]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a78      	ldr	r2, [pc, #480]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a75      	ldr	r2, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0xd0>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0xb8>
 800430e:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6d      	ldr	r2, [pc, #436]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xd0>
 8004328:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a66      	ldr	r2, [pc, #408]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd f99e 	bl	8001688 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd f99a 	bl	8001688 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e2ad      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004362:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xe0>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd f98a 	bl	8001688 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004378:	f7fd f986 	bl	8001688 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e299      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800438a:	4b52      	ldr	r3, [pc, #328]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x108>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d05a      	beq.n	800445c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d119      	bne.n	80043e6 <HAL_RCC_OscConfig+0x176>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d116      	bne.n	80043e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b8:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_OscConfig+0x160>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e276      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	493d      	ldr	r1, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e4:	e03a      	b.n	800445c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ee:	4b3a      	ldr	r3, [pc, #232]	; (80044d8 <HAL_RCC_OscConfig+0x268>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd f948 	bl	8001688 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fc:	f7fd f944 	bl	8001688 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e257      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	492a      	ldr	r1, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
 800442e:	e015      	b.n	800445c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_RCC_OscConfig+0x268>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004436:	f7fd f927 	bl	8001688 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd f923 	bl	8001688 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e236      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80b8 	beq.w	80045da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d170      	bne.n	8004552 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004470:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_OscConfig+0x218>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e21a      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004494:	429a      	cmp	r2, r3
 8004496:	d921      	bls.n	80044dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fc3b 	bl	8004d18 <RCC_SetFlashLatencyFromMSIRange>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e208      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4906      	ldr	r1, [pc, #24]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	4901      	ldr	r1, [pc, #4]	; (80044d4 <HAL_RCC_OscConfig+0x264>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
 80044d2:	e020      	b.n	8004516 <HAL_RCC_OscConfig+0x2a6>
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044dc:	4b99      	ldr	r3, [pc, #612]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4996      	ldr	r1, [pc, #600]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ee:	4b95      	ldr	r3, [pc, #596]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	4991      	ldr	r1, [pc, #580]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fc06 	bl	8004d18 <RCC_SetFlashLatencyFromMSIRange>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1d3      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	0b5b      	lsrs	r3, r3, #13
 800451c:	3301      	adds	r3, #1
 800451e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004526:	4a87      	ldr	r2, [pc, #540]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004528:	6892      	ldr	r2, [r2, #8]
 800452a:	0912      	lsrs	r2, r2, #4
 800452c:	f002 020f 	and.w	r2, r2, #15
 8004530:	4985      	ldr	r1, [pc, #532]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004532:	5c8a      	ldrb	r2, [r1, r2]
 8004534:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004536:	4a85      	ldr	r2, [pc, #532]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 8004538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCC_OscConfig+0x4e0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd f856 	bl	80015f0 <HAL_InitTick>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d045      	beq.n	80045da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	e1b5      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d029      	beq.n	80045ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800455a:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x4e4>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fd f892 	bl	8001688 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004568:	f7fd f88e 	bl	8001688 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1a1      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800457a:	4b72      	ldr	r3, [pc, #456]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004586:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	496c      	ldr	r1, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004598:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	4967      	ldr	r1, [pc, #412]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045ae:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x4e4>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fd f868 	bl	8001688 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045bc:	f7fd f864 	bl	8001688 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e177      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045ce:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fd f848 	bl	8001688 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fd f844 	bl	8001688 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e157      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800460e:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x38c>
 800461a:	e015      	b.n	8004648 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461c:	4b4e      	ldr	r3, [pc, #312]	; (8004758 <HAL_RCC_OscConfig+0x4e8>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fd f831 	bl	8001688 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462a:	f7fd f82d 	bl	8001688 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e140      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80b5 	beq.w	80047c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	4a36      	ldr	r2, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6253      	str	r3, [r2, #36]	; 0x24
 8004672:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467e:	2301      	movs	r3, #1
 8004680:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004682:	4b36      	ldr	r3, [pc, #216]	; (800475c <HAL_RCC_OscConfig+0x4ec>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d118      	bne.n	80046c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468e:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_OscConfig+0x4ec>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a32      	ldr	r2, [pc, #200]	; (800475c <HAL_RCC_OscConfig+0x4ec>)
 8004694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469a:	f7fc fff5 	bl	8001688 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a2:	f7fc fff1 	bl	8001688 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b64      	cmp	r3, #100	; 0x64
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e104      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_OscConfig+0x4ec>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x466>
 80046c8:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d2:	6353      	str	r3, [r2, #52]	; 0x34
 80046d4:	e02d      	b.n	8004732 <HAL_RCC_OscConfig+0x4c2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x488>
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e8:	6353      	str	r3, [r2, #52]	; 0x34
 80046ea:	4b16      	ldr	r3, [pc, #88]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	4a15      	ldr	r2, [pc, #84]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 80046f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f4:	6353      	str	r3, [r2, #52]	; 0x34
 80046f6:	e01c      	b.n	8004732 <HAL_RCC_OscConfig+0x4c2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d10c      	bne.n	800471a <HAL_RCC_OscConfig+0x4aa>
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800470a:	6353      	str	r3, [r2, #52]	; 0x34
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6353      	str	r3, [r2, #52]	; 0x34
 8004718:	e00b      	b.n	8004732 <HAL_RCC_OscConfig+0x4c2>
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	6353      	str	r3, [r2, #52]	; 0x34
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	4a06      	ldr	r2, [pc, #24]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 800472c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004730:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d024      	beq.n	8004784 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fc ffa5 	bl	8001688 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004740:	e019      	b.n	8004776 <HAL_RCC_OscConfig+0x506>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	08005d44 	.word	0x08005d44
 800474c:	20000000 	.word	0x20000000
 8004750:	20000004 	.word	0x20000004
 8004754:	42470020 	.word	0x42470020
 8004758:	42470680 	.word	0x42470680
 800475c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fc ff92 	bl	8001688 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0a3      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004776:	4b54      	ldr	r3, [pc, #336]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RCC_OscConfig+0x4f0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fc ff80 	bl	8001688 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fc ff7c 	bl	8001688 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e08d      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047a2:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	4a43      	ldr	r2, [pc, #268]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d079      	beq.n	80048bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d056      	beq.n	800487c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d13b      	bne.n	800484e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_RCC_OscConfig+0x65c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fc ff54 	bl	8001688 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fc ff50 	bl	8001688 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e063      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004802:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	4319      	orrs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	430b      	orrs	r3, r1
 800481a:	492b      	ldr	r1, [pc, #172]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCC_OscConfig+0x65c>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fc ff2f 	bl	8001688 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fc ff2b 	bl	8001688 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e03e      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x5be>
 800484c:	e036      	b.n	80048bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_RCC_OscConfig+0x65c>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fc ff18 	bl	8001688 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc ff14 	bl	8001688 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e027      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800486e:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x5ec>
 800487a:	e01f      	b.n	80048bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e01a      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_OscConfig+0x658>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	429a      	cmp	r2, r3
 800489a:	d10d      	bne.n	80048b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d106      	bne.n	80048b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	42470060 	.word	0x42470060

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e11a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b8f      	ldr	r3, [pc, #572]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d919      	bls.n	8004926 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCC_ClockConfig+0x34>
 80048f8:	4b8a      	ldr	r3, [pc, #552]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a89      	ldr	r2, [pc, #548]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b87      	ldr	r3, [pc, #540]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0201 	bic.w	r2, r3, #1
 800490c:	4985      	ldr	r1, [pc, #532]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004914:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0f9      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	497a      	ldr	r1, [pc, #488]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 808e 	beq.w	8004a6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d121      	bne.n	80049aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0d7      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004972:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d115      	bne.n	80049aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0cb      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0bf      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0b7      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b5f      	ldr	r3, [pc, #380]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	495c      	ldr	r1, [pc, #368]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fc fe64 	bl	8001688 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d112      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fc fe5c 	bl	8001688 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e09b      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e2:	4b51      	ldr	r3, [pc, #324]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_ClockConfig+0xfc>
 80049ee:	e03e      	b.n	8004a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d112      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fa:	f7fc fe45 	bl	8001688 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e084      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a10:	4b45      	ldr	r3, [pc, #276]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d1ee      	bne.n	80049fa <HAL_RCC_ClockConfig+0x12a>
 8004a1c:	e027      	b.n	8004a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d11d      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fc fe2e 	bl	8001688 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e06d      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d1ee      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x158>
 8004a4a:	e010      	b.n	8004a6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fc fe1c 	bl	8001688 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e05b      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d219      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x1be>
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a27      	ldr	r2, [pc, #156]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	4923      	ldr	r1, [pc, #140]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <HAL_RCC_ClockConfig+0x254>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e034      	b.n	8004b1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4917      	ldr	r1, [pc, #92]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	490f      	ldr	r1, [pc, #60]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aee:	f000 f823 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af2:	4602      	mov	r2, r0
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_RCC_ClockConfig+0x258>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	490b      	ldr	r1, [pc, #44]	; (8004b2c <HAL_RCC_ClockConfig+0x25c>)
 8004b00:	5ccb      	ldrb	r3, [r1, r3]
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fc fd6e 	bl	80015f0 <HAL_InitTick>
 8004b14:	4603      	mov	r3, r0
 8004b16:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b18:	7afb      	ldrb	r3, [r7, #11]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08005d44 	.word	0x08005d44
 8004b30:	20000000 	.word	0x20000000
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b3c:	b08e      	sub	sp, #56	; 0x38
 8004b3e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b40:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d00d      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x34>
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	f200 8092 	bhi.w	8004c7a <HAL_RCC_GetSysClockFreq+0x142>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x28>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x2e>
 8004b5e:	e08c      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x170>)
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b64:	e097      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b66:	4b51      	ldr	r3, [pc, #324]	; (8004cac <HAL_RCC_GetSysClockFreq+0x174>)
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b6a:	e094      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	0c9b      	lsrs	r3, r3, #18
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	4b4e      	ldr	r3, [pc, #312]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	0d9b      	lsrs	r3, r3, #22
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	2200      	movs	r2, #0
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	4b44      	ldr	r3, [pc, #272]	; (8004cac <HAL_RCC_GetSysClockFreq+0x174>)
 8004b9c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004ba0:	464a      	mov	r2, r9
 8004ba2:	fb03 f202 	mul.w	r2, r3, r2
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	4644      	mov	r4, r8
 8004baa:	fb04 f303 	mul.w	r3, r4, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <HAL_RCC_GetSysClockFreq+0x174>)
 8004bb2:	4644      	mov	r4, r8
 8004bb4:	fba4 0102 	umull	r0, r1, r4, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	617a      	str	r2, [r7, #20]
 8004bc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc8:	f7fb fad8 	bl	800017c <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	e04e      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	2200      	movs	r2, #0
 8004bda:	469a      	mov	sl, r3
 8004bdc:	4693      	mov	fp, r2
 8004bde:	4652      	mov	r2, sl
 8004be0:	465b      	mov	r3, fp
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8004bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c12:	ebb2 0408 	subs.w	r4, r2, r8
 8004c16:	eb63 0509 	sbc.w	r5, r3, r9
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	00eb      	lsls	r3, r5, #3
 8004c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c28:	00e2      	lsls	r2, r4, #3
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	eb14 030a 	adds.w	r3, r4, sl
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	eb45 030b 	adc.w	r3, r5, fp
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c46:	4629      	mov	r1, r5
 8004c48:	028b      	lsls	r3, r1, #10
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4604      	mov	r4, r0
 8004c50:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004c54:	4601      	mov	r1, r0
 8004c56:	028a      	lsls	r2, r1, #10
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	60fa      	str	r2, [r7, #12]
 8004c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c68:	f7fb fa88 	bl	800017c <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c78:	e00d      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0b5b      	lsrs	r3, r3, #13
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3738      	adds	r7, #56	; 0x38
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	016e3600 	.word	0x016e3600
 8004cb0:	08005d38 	.word	0x08005d38

08004cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	20000000 	.word	0x20000000

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ccc:	f7ff fff2 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	08005d54 	.word	0x08005d54

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cf4:	f7ff ffde 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0adb      	lsrs	r3, r3, #11
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08005d54 	.word	0x08005d54

08004d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d12c      	bne.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004d3c:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e016      	b.n	8004d76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d48:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d52:	6253      	str	r3, [r2, #36]	; 0x24
 8004d54:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d7c:	d105      	bne.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d84:	d101      	bne.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d86:	2301      	movs	r3, #1
 8004d88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0f      	ldr	r2, [pc, #60]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 0201 	bic.w	r2, r3, #1
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d001      	beq.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	40023c00 	.word	0x40023c00

08004dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80b8 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	4b5a      	ldr	r3, [pc, #360]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	4a59      	ldr	r2, [pc, #356]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6253      	str	r3, [r2, #36]	; 0x24
 8004e0a:	4b57      	ldr	r3, [pc, #348]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b54      	ldr	r3, [pc, #336]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a50      	ldr	r2, [pc, #320]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fc fc29 	bl	8001688 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fc fc25 	bl	8001688 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b64      	cmp	r3, #100	; 0x64
 8004e46:	d901      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e089      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004e60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d00f      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e7e:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e067      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004e90:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d034      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d02d      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d027      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004eba:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004ec2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eca:	4b29      	ldr	r3, [pc, #164]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004ed0:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fbd2 	bl	8001688 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fc fbce 	bl	8001688 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e030      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ee      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f22:	d10a      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004f34:	490c      	ldr	r1, [pc, #48]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f46:	4908      	ldr	r1, [pc, #32]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	424706dc 	.word	0x424706dc

08004f74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e073      	b.n	8005072 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7f5b      	ldrb	r3, [r3, #29]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fc fa20 	bl	80013e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d055      	beq.n	8005060 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	22ca      	movs	r2, #202	; 0xca
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2253      	movs	r2, #83	; 0x53
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f99b 	bl	8005300 <RTC_EnterInitMode>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d12c      	bne.n	800502e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6899      	ldr	r1, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68d2      	ldr	r2, [r2, #12]
 800500e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6919      	ldr	r1, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	041a      	lsls	r2, r3, #16
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9a2 	bl	800536e <RTC_ExitInitMode>
 800502a:	4603      	mov	r3, r0
 800502c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d110      	bne.n	8005056 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	22ff      	movs	r2, #255	; 0xff
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
 800505e:	e001      	b.n	8005064 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800507a:	b590      	push	{r4, r7, lr}
 800507c:	b087      	sub	sp, #28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	7f1b      	ldrb	r3, [r3, #28]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_RTC_SetTime+0x1c>
 8005092:	2302      	movs	r3, #2
 8005094:	e087      	b.n	80051a6 <HAL_RTC_SetTime+0x12c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d126      	bne.n	80050f6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f979 	bl	80053b8 <RTC_ByteToBcd2>
 80050c6:	4603      	mov	r3, r0
 80050c8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f972 	bl	80053b8 <RTC_ByteToBcd2>
 80050d4:	4603      	mov	r3, r0
 80050d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050d8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f96a 	bl	80053b8 <RTC_ByteToBcd2>
 80050e4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e018      	b.n	8005128 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005116:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800511c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	22ca      	movs	r2, #202	; 0xca
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2253      	movs	r2, #83	; 0x53
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f8e1 	bl	8005300 <RTC_EnterInitMode>
 800513e:	4603      	mov	r3, r0
 8005140:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d120      	bne.n	800518a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005152:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005156:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005166:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f8f4 	bl	800536e <RTC_ExitInitMode>
 8005186:	4603      	mov	r3, r0
 8005188:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]

  return status;
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}

080051ae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051ae:	b590      	push	{r4, r7, lr}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	7f1b      	ldrb	r3, [r3, #28]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_RTC_SetDate+0x1c>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e071      	b.n	80052ae <HAL_RTC_SetDate+0x100>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2202      	movs	r2, #2
 80051d4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <HAL_RTC_SetDate+0x4c>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	330a      	adds	r3, #10
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11c      	bne.n	800523a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f8d7 	bl	80053b8 <RTC_ByteToBcd2>
 800520a:	4603      	mov	r3, r0
 800520c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f8d0 	bl	80053b8 <RTC_ByteToBcd2>
 8005218:	4603      	mov	r3, r0
 800521a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800521c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f8c8 	bl	80053b8 <RTC_ByteToBcd2>
 8005228:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800522a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e00e      	b.n	8005258 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005246:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800524c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	22ca      	movs	r2, #202	; 0xca
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2253      	movs	r2, #83	; 0x53
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f849 	bl	8005300 <RTC_EnterInitMode>
 800526e:	4603      	mov	r3, r0
 8005270:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10c      	bne.n	8005292 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005282:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005286:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f870 	bl	800536e <RTC_ExitInitMode>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	22ff      	movs	r2, #255	; 0xff
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]

  return status;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}

080052b6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f64f 7257 	movw	r2, #65367	; 0xff57
 80052ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052cc:	f7fc f9dc 	bl	8001688 <HAL_GetTick>
 80052d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052d2:	e009      	b.n	80052e8 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d4:	f7fc f9d8 	bl	8001688 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e2:	d901      	bls.n	80052e8 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e007      	b.n	80052f8 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ee      	beq.n	80052d4 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d122      	bne.n	8005364 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800532c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800532e:	f7fc f9ab 	bl	8001688 <HAL_GetTick>
 8005332:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005334:	e00c      	b.n	8005350 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005336:	f7fc f9a7 	bl	8001688 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005344:	d904      	bls.n	8005350 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <RTC_EnterInitMode+0x64>
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d1e8      	bne.n	8005336 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005388:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ff8c 	bl	80052b6 <HAL_RTC_WaitForSynchro>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2204      	movs	r2, #4
 80053a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80053c6:	e005      	b.n	80053d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	3b0a      	subs	r3, #10
 80053d2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	2b09      	cmp	r3, #9
 80053d8:	d8f6      	bhi.n	80053c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b2db      	uxtb	r3, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005400:	4b59      	ldr	r3, [pc, #356]	; (8005568 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a59      	ldr	r2, [pc, #356]	; (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0adb      	lsrs	r3, r3, #11
 800540c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	7f1b      	ldrb	r3, [r3, #28]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800541e:	2302      	movs	r3, #2
 8005420:	e09d      	b.n	800555e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	22ca      	movs	r2, #202	; 0xca
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2253      	movs	r2, #83	; 0x53
 800543c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	2b00      	cmp	r3, #0
 800544a:	d018      	beq.n	800547e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3b01      	subs	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2203      	movs	r2, #3
 8005464:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e076      	b.n	800555e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e6      	bne.n	800544c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800549e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80054a0:	4b31      	ldr	r3, [pc, #196]	; (8005568 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a31      	ldr	r2, [pc, #196]	; (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0adb      	lsrs	r3, r3, #11
 80054ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	22ff      	movs	r2, #255	; 0xff
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2203      	movs	r2, #3
 80054ce:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e041      	b.n	800555e <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0e6      	beq.n	80054b6 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0207 	bic.w	r2, r2, #7
 80054f6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a13      	ldr	r2, [pc, #76]	; (8005570 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005536:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005546:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr
 8005568:	20000000 	.word	0x20000000
 800556c:	10624dd3 	.word	0x10624dd3
 8005570:	40010400 	.word	0x40010400

08005574 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800557e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005582:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80055a2:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f809 	bl	80055bc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	775a      	strb	r2, [r3, #29]
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40010400 	.word	0x40010400

080055bc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e031      	b.n	8005644 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fb ff0f 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f000 f92f 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e032      	b.n	80056ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d00e      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <HAL_TIM_Base_Start+0x88>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <HAL_TIM_Base_Start+0x8c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_Base_Start+0x48>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a13      	ldr	r2, [pc, #76]	; (80056dc <HAL_TIM_Base_Start+0x90>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d111      	bne.n	80056b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d010      	beq.n	80056c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	e007      	b.n	80056c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40010800 	.word	0x40010800

080056e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIM_ConfigClockSource+0x1c>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e0b4      	b.n	8005866 <HAL_TIM_ConfigClockSource+0x186>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800571a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d03e      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	f200 8087 	bhi.w	800584c <HAL_TIM_ConfigClockSource+0x16c>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	f000 8086 	beq.w	8005852 <HAL_TIM_ConfigClockSource+0x172>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	d87f      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b70      	cmp	r3, #112	; 0x70
 800574e:	d01a      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0xa6>
 8005750:	2b70      	cmp	r3, #112	; 0x70
 8005752:	d87b      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b60      	cmp	r3, #96	; 0x60
 8005756:	d050      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x11a>
 8005758:	2b60      	cmp	r3, #96	; 0x60
 800575a:	d877      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b50      	cmp	r3, #80	; 0x50
 800575e:	d03c      	beq.n	80057da <HAL_TIM_ConfigClockSource+0xfa>
 8005760:	2b50      	cmp	r3, #80	; 0x50
 8005762:	d873      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d058      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x13a>
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d86f      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b30      	cmp	r3, #48	; 0x30
 800576e:	d064      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	2b30      	cmp	r3, #48	; 0x30
 8005772:	d86b      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b20      	cmp	r3, #32
 8005776:	d060      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b20      	cmp	r3, #32
 800577a:	d867      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d05c      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b10      	cmp	r3, #16
 8005782:	d05a      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x15a>
 8005784:	e062      	b.n	800584c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6899      	ldr	r1, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f000 f944 	bl	8005a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	609a      	str	r2, [r3, #8]
      break;
 80057b2:	e04f      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6899      	ldr	r1, [r3, #8]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f000 f92d 	bl	8005a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057d6:	609a      	str	r2, [r3, #8]
      break;
 80057d8:	e03c      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 f8a4 	bl	8005934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2150      	movs	r1, #80	; 0x50
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f8fb 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 80057f8:	e02c      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 f8c2 	bl	8005990 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2160      	movs	r1, #96	; 0x60
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f8eb 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 8005818:	e01c      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6859      	ldr	r1, [r3, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	461a      	mov	r2, r3
 8005828:	f000 f884 	bl	8005934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2140      	movs	r1, #64	; 0x40
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f8db 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 8005838:	e00c      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f000 f8d2 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 800584a:	e003      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e000      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x28>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a25      	ldr	r2, [pc, #148]	; (8005920 <TIM_Base_SetConfig+0xb0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x28>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a24      	ldr	r2, [pc, #144]	; (8005924 <TIM_Base_SetConfig+0xb4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0x6a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <TIM_Base_SetConfig+0xb0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0x6a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a19      	ldr	r2, [pc, #100]	; (8005924 <TIM_Base_SetConfig+0xb4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0x6a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a18      	ldr	r2, [pc, #96]	; (8005928 <TIM_Base_SetConfig+0xb8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0x6a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a17      	ldr	r2, [pc, #92]	; (800592c <TIM_Base_SetConfig+0xbc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0x6a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <TIM_Base_SetConfig+0xc0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40010800 	.word	0x40010800
 800592c:	40010c00 	.word	0x40010c00
 8005930:	40011000 	.word	0x40011000

08005934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800595e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 030a 	bic.w	r3, r3, #10
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f023 0210 	bic.w	r2, r3, #16
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	031b      	lsls	r3, r3, #12
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr

080059ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f043 0307 	orr.w	r3, r3, #7
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	609a      	str	r2, [r3, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b087      	sub	sp, #28
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	021a      	lsls	r2, r3, #8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	609a      	str	r2, [r3, #8]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e042      	b.n	8005af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fb fce4 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	; 0x24
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f82b 	bl	8005b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b40:	f023 030c 	bic.w	r3, r3, #12
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a55      	ldr	r2, [pc, #340]	; (8005cc0 <UART_SetConfig+0x1c0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d103      	bne.n	8005b76 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b6e:	f7ff f8bf 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	e002      	b.n	8005b7c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b76:	f7ff f8a7 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005b7a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b84:	d14c      	bne.n	8005c20 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009a      	lsls	r2, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	4a49      	ldr	r2, [pc, #292]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	0119      	lsls	r1, r3, #4
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bbc:	4b41      	ldr	r3, [pc, #260]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2064      	movs	r0, #100	; 0x64
 8005bc6:	fb00 f303 	mul.w	r3, r0, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	3332      	adds	r3, #50	; 0x32
 8005bd0:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bde:	4419      	add	r1, r3
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009a      	lsls	r2, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf6:	4b33      	ldr	r3, [pc, #204]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005bf8:	fba3 0302 	umull	r0, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2064      	movs	r0, #100	; 0x64
 8005c00:	fb00 f303 	mul.w	r3, r0, r3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	3332      	adds	r3, #50	; 0x32
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 0207 	and.w	r2, r3, #7
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c1e:	e04a      	b.n	8005cb6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009a      	lsls	r2, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	0119      	lsls	r1, r3, #4
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009a      	lsls	r2, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c56:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005c58:	fba3 0302 	umull	r0, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2064      	movs	r0, #100	; 0x64
 8005c60:	fb00 f303 	mul.w	r3, r0, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c76:	4419      	add	r1, r3
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009a      	lsls	r2, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005c90:	fba3 0302 	umull	r0, r3, r3, r2
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	2064      	movs	r0, #100	; 0x64
 8005c98:	fb00 f303 	mul.w	r3, r0, r3
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	3332      	adds	r3, #50	; 0x32
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <UART_SetConfig+0x1c4>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f003 020f 	and.w	r2, r3, #15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	51eb851f 	.word	0x51eb851f

08005cc8 <__libc_init_array>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	2600      	movs	r6, #0
 8005ccc:	4d0c      	ldr	r5, [pc, #48]	; (8005d00 <__libc_init_array+0x38>)
 8005cce:	4c0d      	ldr	r4, [pc, #52]	; (8005d04 <__libc_init_array+0x3c>)
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	42a6      	cmp	r6, r4
 8005cd6:	d109      	bne.n	8005cec <__libc_init_array+0x24>
 8005cd8:	f000 f822 	bl	8005d20 <_init>
 8005cdc:	2600      	movs	r6, #0
 8005cde:	4d0a      	ldr	r5, [pc, #40]	; (8005d08 <__libc_init_array+0x40>)
 8005ce0:	4c0a      	ldr	r4, [pc, #40]	; (8005d0c <__libc_init_array+0x44>)
 8005ce2:	1b64      	subs	r4, r4, r5
 8005ce4:	10a4      	asrs	r4, r4, #2
 8005ce6:	42a6      	cmp	r6, r4
 8005ce8:	d105      	bne.n	8005cf6 <__libc_init_array+0x2e>
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf0:	4798      	blx	r3
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	e7ee      	b.n	8005cd4 <__libc_init_array+0xc>
 8005cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfa:	4798      	blx	r3
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	e7f2      	b.n	8005ce6 <__libc_init_array+0x1e>
 8005d00:	08005d64 	.word	0x08005d64
 8005d04:	08005d64 	.word	0x08005d64
 8005d08:	08005d64 	.word	0x08005d64
 8005d0c:	08005d68 	.word	0x08005d68

08005d10 <memset>:
 8005d10:	4603      	mov	r3, r0
 8005d12:	4402      	add	r2, r0
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d100      	bne.n	8005d1a <memset+0xa>
 8005d18:	4770      	bx	lr
 8005d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d1e:	e7f9      	b.n	8005d14 <memset+0x4>

08005d20 <_init>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr

08005d2c <_fini>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	bf00      	nop
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr
